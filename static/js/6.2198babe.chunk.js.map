{"version":3,"sources":["Components/DateSelect.js","Components/DataEntryField.js","Components/DailyChart.js"],"names":["DateSelect","date","this","props","selected","onChange","setDate","Component","DataEntryField","submitData","event","preventDefault","num","parseInt","refs","input","value","isNaN","updateDailyData","guest","onSubmit","className","type","placeholder","ref","disabled","dailyData","DailyChart","removeNoise","data","chunk","catchPoints","slice","map","val","y","length","deletedNoiseArray","acc","i","push","stringifyDate","year","getFullYear","toString","month","getMonth","day","getDate","setState","changeGraph","fullDate","fetch","method","headers","body","JSON","stringify","newDate","then","response","json","x","concat","index","catches","res","Date","state","changeCurrentPath","location","pathname","xPadding","yPadding","ind","currentDate","style","theme","VictoryTheme","material","domainPadding","containerComponent","labels","datum","voronoiBlacklist","parent","maxWidth","text","textAnchor","axisLabel","padding","axis","label","tickValues","dependentAxis","animate","duration","onLoad","name","stroke","withRouter"],"mappings":"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","file":"static/js/6.2198babe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DateSelect extends Component {\r\n  render() {\r\n    const { date } = this.props;\r\n\r\n    return (\r\n      <div >\r\n        <DatePicker selected={date} onChange={date => this.props.setDate(date)} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default DateSelect;","import React, { Component } from 'react';\r\n\r\nclass DataEntryField extends Component {\r\n    render() {\r\n        const { guest } = this.props;\r\n\r\n        return (\r\n            // Form\r\n            <form onSubmit={this.submitData}>\r\n                <div className=''>\r\n\r\n                    {/* Input field */}\r\n                    <div>\r\n                        <input\r\n                            className={`f6 input-reset fl black-80  pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns b--black ${guest === 'true' ? 'bg-moon-gray' : 'bg-white'}`}\r\n                            type='text'\r\n                            placeholder='Number of catches'\r\n                            ref=\"input\"\r\n                            disabled={guest === 'true' ? true : null}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Submit button */}\r\n                    <div>\r\n                        <input\r\n                            className={`f6 button-reset fl pv3 tc bn bg-green hover-bg-green white w-100 w-25-m w-20-l br2-ns br--right-ns ${guest === 'true' ? null : 'pointer'}`}\r\n                            type='submit'\r\n                            value='Add'\r\n                            disabled={this.props.guest === 'true' ? true : null}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // When data is entered into the input field\r\n    submitData = (event) => {\r\n        event.preventDefault(); // Prevent page from refreshing when submitted\r\n\r\n        const num = parseInt(this.refs.input.value, 10); // Get value\r\n\r\n        // If value is actually a number update daily data and clear text field\r\n        // Otherwise just clear text field and nothing else\r\n        if (isNaN(num)) {\r\n            this.refs.input.value = '';\r\n        } else {\r\n            this.refs.input.value = '';\r\n            this.props.updateDailyData(num);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DataEntryField;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryLine, VictoryAxis, VictoryVoronoiContainer, VictoryScatter, VictoryLabel } from 'victory';\r\nimport DateSelect from '../Components/DateSelect';\r\nimport DataEntryField from './DataEntryField';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nlet dailyData = [];\r\n\r\nclass DailyChart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dailyData: dailyData,\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update state and get data when app opened\r\n    componentDidMount() {\r\n        this.setDate(this.state.date);\r\n        this.props.changeCurrentPath(this.props.location.pathname);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        const { xPadding, yPadding } = this.props; // Padding for charts\r\n\r\n        // Data for average line\r\n        let deletedNoiseArray = [];\r\n        const chunk = 5;\r\n\r\n        // Create average line data\r\n        if (dailyData.length > 1) {\r\n            deletedNoiseArray = this.removeNoise(dailyData, chunk).map((val, ind) => ({ x: (ind) * 5, y: val }));\r\n        }\r\n\r\n        const currentDate = this.stringifyDate(this.state.date); // Current presented date\r\n\r\n        dailyData = this.state.dailyData; // Current data\r\n\r\n        return (\r\n            <div className='flex justify-center'>\r\n                <div className='mr5' style={{ 'width': '600px' }}>\r\n                    <VictoryChart\r\n                        className='mt6'\r\n                        theme={VictoryTheme.material}\r\n                        domainPadding={{ x: [0, 70] }} // Fix weird cutoff problem sort of\r\n\r\n                        // Component allows hovering over data for information\r\n                        containerComponent={\r\n                            <VictoryVoronoiContainer\r\n                                labels={({ datum }) => `Attempt ${datum.x}: ${datum.y} catches`}\r\n                                voronoiBlacklist={['points', 'noise']}\r\n                            />}\r\n\r\n                        style={{ parent: { maxWidth: '200%' } }}\r\n                    >\r\n\r\n                        {/* Title */}\r\n                        <VictoryLabel text={`Catches ${currentDate}`} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                        {/* Axes and labels */}\r\n                        <VictoryAxis\r\n                            style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }}\r\n                            label='Attempt'\r\n                            tickValues={\r\n                                dailyData.length === 1 ? [0, 1] : []\r\n                            }\r\n                        />\r\n                        <VictoryAxis\r\n                            style={{ axisLabel: { padding: yPadding } }}\r\n                            dependentAxis\r\n                            label='Catches'\r\n                            tickValues={\r\n                                dailyData.length === 1 ? [0, 1] : []\r\n                            }\r\n                        />\r\n\r\n                        {/* Line graph */}\r\n                        <VictoryLine\r\n                            data={dailyData}\r\n                            animate={{\r\n                                duration: 1000,\r\n                                onLoad: { duration: 2000 }\r\n                            }}\r\n                        />\r\n\r\n                        {/* Data with noise removed */}\r\n                        <VictoryLine\r\n                            name='noise'\r\n                            data={deletedNoiseArray}\r\n                            style={{\r\n                                data: { stroke: \"#c43a31\" }\r\n                            }}\r\n                            animate={{\r\n                                duration: 1000,\r\n                                onLoad: { duration: 2000 }\r\n                            }}\r\n                        />\r\n\r\n                        {/* Scatter plot */}\r\n                        <VictoryScatter\r\n                            name='points'\r\n                            data={dailyData}\r\n                            animate={{\r\n                                duration: 1000,\r\n                                onLoad: { duration: 2000 }\r\n                            }}\r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n\r\n                {/* Input field and date selector */}\r\n                <div className='mt5' style={{ 'width': '300px' }}>\r\n                    <div className='center'>\r\n\r\n                        {/* Enter number field */}\r\n                        <div className='mb3 overflow-auto'  >\r\n                            <DataEntryField guest={this.props.guest} updateDailyData={this.updateDailyData} />\r\n                        </div>\r\n\r\n                        {/* Date picker */}\r\n                        <div>\r\n                            <DateSelect setDate={this.setDate} date={this.state.date} />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Removes noise from data by taking average every chunk-sized chunks\r\n    removeNoise = (data, chunk) => {\r\n        const catchPoints = data.slice(1).map((val) => val.y); // Isolate catch data\r\n        const length = catchPoints.length;\r\n        let deletedNoiseArray = [0]; // Start with zero\r\n        let acc = 0;\r\n\r\n        // Remove noise\r\n        for (var i = 0; i < length; i++) {\r\n\r\n            // If chunk size is reached, push in average for that chunk\r\n            // and reset the acc to 0\r\n            if (!(i % chunk) && (i !== 0)) {\r\n                deletedNoiseArray.push(acc / chunk);\r\n                acc = 0;\r\n            }\r\n\r\n            // Accumulate sum\r\n            acc += catchPoints[i];\r\n\r\n            // If we are at the last element, just push in average for however much was left\r\n            if (i === length - 1) {\r\n                deletedNoiseArray.push(acc / (length % chunk));\r\n            }\r\n        }\r\n\r\n        // Return final array\r\n        return deletedNoiseArray;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Turn date into a string\r\n    stringifyDate = (date) => {\r\n        // Reformat the date to make it easier to pass into DB/title\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n        let day = date.getDate().toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        if (day.length === 1) {\r\n            day = '0' + day;\r\n        }\r\n\r\n        return `${year}-${month}-${day}`;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Change date to date selected on calendar\r\n    setDate = (date) => {\r\n        // Need to call changeGraph like this so that\r\n        // it has access to the updated state\r\n        this.setState({ date }, () => this.changeGraph(date));\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Get graph data for a certain day\r\n    changeGraph = (date) => {\r\n        // Reformat the date to make it easier to pass into DB/title\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n        let day = date.getDate().toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        if (day.length === 1) {\r\n            day = '0' + day;\r\n        }\r\n\r\n        const fullDate = `${year}-${month}-${day}`;\r\n\r\n        // Call to backend to get data\r\n        fetch('https://obscure-river-59718.herokuapp.com/dailygraph', {\r\n            method: 'post', // Can't pass in body if it's a GET\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                newDate: fullDate // Pass in the new date\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Change the dailyData to reflect the new date\r\n                // TODO: Don't set up initial dailyData like this. Idea: update DB to include a 0 catch every day\r\n                dailyData = [{ x: 0, y: 0 }].concat(data.map((num, index) => ({ x: index + 1, y: parseInt(num.catches) })));\r\n                this.setState({ dailyData });\r\n            });\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update DB/graph when data is input\r\n    updateDailyData = (catches) => {\r\n        fetch('https://obscure-river-59718.herokuapp.com/dailyupdate', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                catches: catches\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then((res) => {\r\n                this.setState({ date: new Date() }, () => this.changeGraph(this.state.date));\r\n                return res;\r\n            })\r\n            .then((res) => {\r\n                // Update the state\r\n                // I COULD call changeGraph but that would just take too much time tbh\r\n                // TODO: Is there a better way to do this? Combine this function and changeGraph somehow?\r\n                dailyData.push({ x: dailyData.length, y: res.catches });\r\n                this.setState({ dailyData });\r\n            });\r\n    }\r\n}\r\n\r\nexport default withRouter(DailyChart);"],"sourceRoot":""}