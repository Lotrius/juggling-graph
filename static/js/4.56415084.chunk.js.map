{"version":3,"sources":["Components/DateSelectAvg.js","Components/DailyAverageChart.js"],"names":["DateSelectAvg","averageDate","setDate","selected","onChange","date","dateFormat","showMonthYearPicker","dailyAverageData","DailyAverageChart","getStyles","xPadding","yPadding","xAxis","axisLabel","padding","fill","axis","stroke","tickLabels","ticks","yAxis","average","data","sessionStorage","setItem","getAverageData","Date","getItem","year","getFullYear","toString","month","getMonth","length","selectedMonth","fetch","method","headers","body","JSON","stringify","then","response","json","avgdata","map","dat","x","to_char","substring","y","parseFloat","avg","setState","state","this","props","changeCurrentPath","location","pathname","currentDate","dailyAverageDataMonth","styles","console","log","className","style","backgroundColor","theme","VictoryTheme","material","domainPadding","containerComponent","labels","datum","toFixed","voronoiBlacklist","text","textAnchor","label","fixLabelOverlap","dependentAxis","animate","duration","onLoad","Component","withRouter"],"mappings":"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","file":"static/js/4.56415084.chunk.js","sourcesContent":["import React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst DateSelectAvg = ({ averageDate, setDate }) => {\r\n    return (\r\n        <div >\r\n            <DatePicker\r\n                selected={averageDate}\r\n                onChange={date => setDate(date)}\r\n                dateFormat=\"MM/yyyy\"\r\n                showMonthYearPicker\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateSelectAvg;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryBar, VictoryAxis, VictoryVoronoiContainer, VictoryLabel } from 'victory';\r\nimport DateSelectAvg from './DateSelectAvg';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './Chart.css'\r\n\r\nlet dailyAverageData = [];\r\n\r\nclass DailyAverageChart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dailyAverageData: dailyAverageData,\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update storage and get data when app opened\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem('avgdate')) {\r\n            this.setDate(new Date(sessionStorage.getItem('avgdate')));\r\n        }\r\n\r\n        this.props.changeCurrentPath(this.props.location.pathname);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        const { xPadding, yPadding } = this.props;\r\n\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] // Array of month names\r\n\r\n        let currentDate = new Date(sessionStorage.getItem('avgdate'));\r\n\r\n        let dailyAverageDataMonth = months[(currentDate.getMonth())]; // Declare month name var\r\n\r\n        const styles = this.getStyles(xPadding, yPadding);\r\n        console.log(styles.xAxis);\r\n\r\n        return (\r\n            <div className='mt3 flex justify-center'>\r\n                <div className='cont flex justify-center mt2 pl3 pr3 ba bw1' style={{ backgroundColor: '#ECD9BA' }}>\r\n                    <div className='chart mr3 bw1' style={{ 'width': '600px' }}>\r\n                        {/* Chart */}\r\n                        <VictoryChart\r\n                            theme={VictoryTheme.material}\r\n                            domainPadding={{ x: [50, 30], y: [50, 30] }} // Fix overlapping/cutoff problem\r\n\r\n                            // Component allows hovering over data for information\r\n                            containerComponent={\r\n                                <VictoryVoronoiContainer\r\n                                    labels={({ datum }) => `${datum.x} average: ${+datum.y.toFixed(2)} catches`}\r\n                                    voronoiBlacklist={['points']}\r\n                                />\r\n                            }\r\n                        >\r\n\r\n                            {/* Title */}\r\n                            <VictoryLabel text={`Average catches ${dailyAverageDataMonth}`} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                            {/* Axes and labels */}\r\n                            <VictoryAxis\r\n                                style={styles.xAxis}\r\n                                label='Day'\r\n                                fixLabelOverlap\r\n                            />\r\n                            <VictoryAxis\r\n                                style={styles.yAxis}\r\n                                dependentAxis\r\n                                label='Average Catches'\r\n                                fixLabelOverlap\r\n                            />\r\n\r\n                            {/* Bar graph */}\r\n                            <VictoryBar\r\n                                data={dailyAverageData}\r\n                                animate={{\r\n                                    duration: 1000,\r\n                                    onLoad: { duration: 0 }\r\n                                }}\r\n                            />\r\n                        </VictoryChart>\r\n                    </div>\r\n\r\n\r\n                    {/* Date picker */}\r\n                    <div className='date ml3 mt5 center' style={{ 'width': '225px' }}>\r\n                        <div className='center'>\r\n                            <DateSelectAvg setDate={this.setDate} averageDate={currentDate} />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getStyles = (xPadding, yPadding) => {\r\n        return {\r\n            xAxis: {\r\n                axisLabel: { padding: xPadding, fill: 'black' }, \r\n                axis: { padding: 100, stroke: 'black' },\r\n                tickLabels: { fill: 'black' },\r\n                ticks: { stroke: 'black' }\r\n            },\r\n            yAxis: {\r\n                axisLabel: { padding: yPadding, fill: 'black' },\r\n                axis: { stroke: 'black' },\r\n                tickLabels: { fill: 'black' },\r\n                ticks: { stroke: 'black' }\r\n            },\r\n            average: {\r\n                data: { stroke: \"#c43a31\" }\r\n            }\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Change date to date selected on calendar\r\n    setDate = (date) => {\r\n        sessionStorage.setItem('avgdate', date);\r\n\r\n        this.getAverageData(new Date(sessionStorage.getItem('avgdate')));\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Get average data graph\r\n    getAverageData = (date) => {\r\n        // Stringify date\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        const selectedMonth = year + '-' + month;\r\n\r\n        // Call to backend\r\n        fetch('https://obscure-river-59718.herokuapp.com/averagegraph', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                selectedMonth: selectedMonth\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then((avgdata) => {\r\n                dailyAverageData = avgdata.map((dat) => ({ x: dat.to_char.substring(8, 10), y: parseFloat(dat.avg) }));\r\n                this.setState({ dailyAverageData });\r\n            })\r\n    }\r\n}\r\n\r\nexport default withRouter(DailyAverageChart);"],"sourceRoot":""}