{"version":3,"sources":["Containers/App.js","serviceWorker.js","index.js"],"names":["SignIn","loadable","DailyChart","DailyAverageChart","Nav","App","changeLoginStatus","status","guest","sandbox","Cookie","get","localStorage","getItem","setItem","set","expires","window","location","reload","changeCurrentPath","path","sessionStorage","Date","className","basename","to","this","exact","render","xPadding","yPadding","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAWMA,EAASC,aAAS,kBAAM,iCACxBC,EAAaD,aAAS,kBAAM,8DAC5BE,EAAoBF,aAAS,kBACjC,8DAEIG,EAAMH,aAAS,kBAAM,iCA0HZI,E,2MAtHbC,kBAAoB,SAAAC,GAClB,IAAMC,EAAmB,UAAXD,EACRE,EAAqB,YAAXF,EAGe,UAA3BG,IAAOC,IAAI,aAA4BD,IAAOC,IAAI,YAclB,SAA3BD,IAAOC,IAAI,cAEoB,SAAlCC,aAAaC,QAAQ,UACvBD,aAAaE,QAAQ,SAAS,GAGQ,SAApCF,aAAaC,QAAQ,YACvBD,aAAaE,QAAQ,WAAW,GAKlCF,aAAaE,QAAQ,OAAQ,KAG7BJ,IAAOK,IAAI,YAAY,EAAO,CAAEC,QAAS,MA3BrCR,GACFI,aAAaE,QAAQ,SAAS,GAE5BL,GACFG,aAAaE,QAAQ,WAAW,GAIlCJ,IAAOK,IAAI,YAAY,EAAM,CAAEC,QAAS,KAqB1CC,OAAOC,SAASC,QAAO,I,EAMzBC,kBAAoB,SAAAC,GAClBT,aAAaE,QAAQ,OAAQO,I,wEAKrB,IAAD,OAEPC,eAAeR,QAAQ,OAAQ,IAAIS,MACnCD,eAAeR,QAAQ,UAAW,IAAIS,MAItC,IAGMF,EAAOT,aAAaC,QAAQ,QAGlC,MAA+B,UAA3BH,IAAOC,IAAI,aAA4BD,IAAOC,IAAI,YAiBpD,yBAAKa,UAAU,mBACb,kBAAC,IAAD,CAAQC,SAAS,mBAEf,kBAAC,IAAD,CAAUC,GAAIL,GAAQ,MAEtB,kBAACjB,EAAD,CAAKE,kBAAmBqB,KAAKrB,oBAE7B,kBAAC,IAAD,KAEE,kBAAC,IAAD,CACEsB,OAAK,EACLC,OAAQ,kBACN,kBAAC3B,EAAD,CACE4B,SApCG,GAqCHC,SApCG,GAqCHX,kBAAmB,EAAKA,qBAG5BC,KAAK,MAIP,kBAAC,IAAD,CACEO,OAAK,EACLC,OAAQ,kBACN,kBAAC1B,EAAD,CACE2B,SAjDG,GAkDHC,SAjDG,GAkDHX,kBAAmB,EAAKA,qBAG5BC,KAAK,gBA9CX,kBAAC,IAAD,CAAQI,SAAS,mBAEf,kBAAC,IAAD,CAAUC,GAAG,YAEb,kBAAC,IAAD,CACEE,OAAK,EACLC,OAAQ,kBAAM,kBAAC7B,EAAD,CAAQM,kBAAmB,EAAKA,qBAC9Ce,KAAK,iB,GAxECW,aCJEC,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2D,MCbNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.14b465ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport Cookie from 'js-cookie';\nimport loadable from '@loadable/component';\n\n// Code splitting\nconst SignIn = loadable(() => import('../Components/SignIn'));\nconst DailyChart = loadable(() => import('../Components/DailyChart'));\nconst DailyAverageChart = loadable(() =>\n  import('../Components/DailyAverageChart')\n);\nconst Nav = loadable(() => import('../Components/Nav'));\n\nclass App extends Component {\n  // Flip login status\n  changeLoginStatus = status => {\n    const guest = status === 'guest';\n    const sandbox = status === 'sandbox';\n\n    // If not signed in, or was never signed in to begin with and are now logging in,\n    if (Cookie.get('signedin') === 'false' || !Cookie.get('signedin')) {\n      // If guest, set guest as true\n      if (guest) {\n        localStorage.setItem('guest', true);\n      }\n      if (sandbox) {\n        localStorage.setItem('sandbox', true);\n      }\n\n      // Signed in cookie true\n      Cookie.set('signedin', true, { expires: 1 });\n    }\n\n    // If already signed in and logging out,\n    else if (Cookie.get('signedin') === 'true') {\n      // If a guest, set guest status to false\n      if (localStorage.getItem('guest') === 'true') {\n        localStorage.setItem('guest', false);\n      }\n\n      if (localStorage.getItem('sandbox') === 'true') {\n        localStorage.setItem('sandbox', false);\n      }\n\n      // Change path to '/' so when signed in again,\n      // will start at daily catches chart\n      localStorage.setItem('path', '/');\n\n      // Set signed in to false\n      Cookie.set('signedin', false, { expires: 1 });\n    }\n    window.location.reload(true); // Reload page\n  };\n\n  /* ////////////////////////////////////////////////////////////////////////// */\n\n  // Update current path\n  changeCurrentPath = path => {\n    localStorage.setItem('path', path);\n  };\n\n  /* ////////////////////////////////////////////////////////////////////////// */\n\n  render() {\n    // Set session dates\n    sessionStorage.setItem('date', new Date());\n    sessionStorage.setItem('avgdate', new Date());\n\n    // Padding for the graphs cause otherwise the labels overlap\n    // the numbers and it looks like hot garbage\n    const xPadding = 30;\n    const yPadding = 35;\n\n    const path = localStorage.getItem('path'); // Current path\n\n    // If there's a cookie or if signed out, go to login page\n    if (Cookie.get('signedin') === 'false' || !Cookie.get('signedin')) {\n      return (\n        <Router basename=\"/juggling-graph\">\n          {/* Redirect to sign in page */}\n          <Redirect to=\"/signin\" />\n\n          <Route\n            exact\n            render={() => <SignIn changeLoginStatus={this.changeLoginStatus} />}\n            path=\"/signin\"\n          />\n        </Router>\n      );\n    }\n\n    // Else go to main page\n    return (\n      <div className=\"container-fluid\">\n        <Router basename=\"/juggling-graph\">\n          {/* Redirect to main page */}\n          <Redirect to={path || '/'} />\n\n          <Nav changeLoginStatus={this.changeLoginStatus} />\n\n          <Switch>\n            {/* Daily catches graph */}\n            <Route\n              exact\n              render={() => (\n                <DailyChart\n                  xPadding={xPadding}\n                  yPadding={yPadding}\n                  changeCurrentPath={this.changeCurrentPath}\n                />\n              )}\n              path=\"/\"\n            />\n\n            {/* Daily average catches graph */}\n            <Route\n              exact\n              render={() => (\n                <DailyAverageChart\n                  xPadding={xPadding}\n                  yPadding={yPadding}\n                  changeCurrentPath={this.changeCurrentPath}\n                />\n              )}\n              path=\"/average\"\n            />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}