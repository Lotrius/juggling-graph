{"version":3,"sources":["Components/DateSelect.js","Components/DataEntryField.js","Components/DailyChart.js","Components/DailyAverageChart.js","Components/Nav.js","Containers/App.js","serviceWorker.js","index.js"],"names":["DateSelect","dateChange","date","setState","startDate","props","setDate","state","Date","selected","this","onChange","Component","DataEntryField","submitData","event","preventDefault","num","parseInt","refs","input","value","isNaN","updateDailyData","onSubmit","className","type","placeholder","ref","DailyChart","removeNoise","data","chunk","catchPoints","slice","map","val","y","length","deletedNoiseArray","acc","i","push","dailyData","xPadding","yPadding","ind","x","style","theme","VictoryTheme","material","domainPadding","containerComponent","labels","datum","voronoiBlacklist","parent","maxWidth","text","textAnchor","axisLabel","padding","axis","label","tickValues","dependentAxis","animate","duration","onLoad","name","stroke","DailyAverageChart","dailyAverageData","dailyAverageDataMonth","substring","toFixed","fixLabelOverlap","Nav","exact","activeClassName","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","year","getFullYear","toString","month","getMonth","day","getDate","fullDate","changeGraph","fetch","method","headers","body","JSON","stringify","newDate","then","response","json","concat","index","catches","res","getAverageData","selectedMonth","avgdata","dat","to_char","parseFloat","avg","basename","fallback","render","path","component","Error","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89341b6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DateSelect extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      startDate: new Date()\r\n    }\r\n  }\r\n\r\n  // Change the date on the calendar\r\n  dateChange = (date) => {\r\n    this.setState({ startDate: date }); // Change highlighted date on calendar\r\n    this.props.setDate(date); // Call setDate from props\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div >\r\n        <DatePicker selected={this.state.startDate} onChange={date => this.dateChange(date)} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default DateSelect;","import React, { Component } from 'react';\r\n\r\nclass DataEntryField extends Component {\r\n    render() {\r\n        return (\r\n            // Form\r\n            <form onSubmit={this.submitData}>\r\n                <div className=''>\r\n                    \r\n                    {/* Input field */}\r\n                    <div>\r\n                        <input\r\n                            className='f6 input-reset fl black-80 bg-white pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns b--black'\r\n                            type='text'\r\n                            placeholder='Number of catches'\r\n                            ref=\"input\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Submit button */}\r\n                    <div>\r\n                        <input\r\n                            className='f6 button-reset fl pv3 tc bn bg-green hover-bg-green white pointer w-100 w-25-m w-20-l br2-ns br--right-ns'\r\n                            type='submit'\r\n                            value='Add'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    // When data is entered into the input field\r\n    submitData = (event) => {\r\n        event.preventDefault(); // Prevent page from refreshing when submitted\r\n\r\n        const num = parseInt(this.refs.input.value, 10); // Get value\r\n        \r\n        // If value is actually a number update daily data and clear text field\r\n        // Otherwise just clear text field and nothing else\r\n        if (isNaN(num)) {\r\n            this.refs.input.value = '';\r\n        } else {\r\n            this.refs.input.value = '';\r\n            this.props.updateDailyData(num);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DataEntryField;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryLine, VictoryAxis, VictoryVoronoiContainer, VictoryScatter, VictoryLabel } from 'victory';\r\nimport DateSelect from '../Components/DateSelect';\r\nimport DataEntryField from './DataEntryField';\r\n\r\nclass DailyChart extends Component {\r\n\r\n    // Removes noise from data by taking average every chunk-sized chunks\r\n    removeNoise = (data, chunk) => {\r\n        const catchPoints = data.slice(1).map((val) => val.y); // Isolate catch data\r\n        const length = catchPoints.length;\r\n        let deletedNoiseArray = [0];\r\n        let acc = 0;\r\n\r\n        // Remove noise\r\n        for (var i = 0; i < length; i++) {\r\n\r\n            // If chunk size is reached, push in average for that chunk\r\n            // and reset the acc to 0\r\n            if (!(i % chunk) && (i !== 0)) {\r\n                deletedNoiseArray.push(acc / chunk);\r\n                acc = 0;\r\n            }\r\n            \r\n            // Accumulate sum\r\n            acc += catchPoints[i];\r\n\r\n            // If we are at the last element, just push in average for however much was left\r\n            if (i === length - 1) {\r\n                deletedNoiseArray.push(acc / (length % chunk));\r\n            }\r\n        }\r\n\r\n        // Return final array\r\n        return deletedNoiseArray;\r\n    }\r\n\r\n    render() {\r\n        const { dailyData, updateDailyData, xPadding, yPadding, date, setDate } = this.props;\r\n\r\n        let deletedNoiseArray = [];\r\n        const chunk = 5;\r\n\r\n        if (dailyData.length > 1) {\r\n            deletedNoiseArray = this.removeNoise(dailyData, chunk).map((val, ind) => ({ x: (ind) * 5, y: val }));\r\n        }\r\n\r\n        return (\r\n            <div className='flex justify-center'>\r\n                <div className='mr5' style={{ 'width': '600px' }}>\r\n                    <VictoryChart\r\n                        className='mt6'\r\n                        theme={VictoryTheme.material}\r\n                        domainPadding={{ x: [0, 70] }} // Fix weird cutoff problem sort of\r\n\r\n                        // Component allows hovering over data for information\r\n                        containerComponent={\r\n                            <VictoryVoronoiContainer\r\n                                labels={({ datum }) => `Attempt ${datum.x}: ${datum.y} catches`}\r\n                                voronoiBlacklist={['points', 'noise']}\r\n                            />}\r\n\r\n                        style={{ parent: { maxWidth: '200%' } }}\r\n                    >\r\n                        <VictoryLabel text={`Catches ${date}`} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                        {/* Axes and labels */}\r\n                        <VictoryAxis\r\n                            style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }}\r\n                            label='Attempt'\r\n                            tickValues={\r\n                                dailyData.length === 1 ? [0, 1] : []\r\n                            }\r\n                        />\r\n                        <VictoryAxis\r\n                            style={{ axisLabel: { padding: yPadding } }}\r\n                            dependentAxis\r\n                            label='Catches'\r\n                            tickValues={\r\n                                dailyData.length === 1 ? [0, 1] : []\r\n                            }\r\n                        />\r\n\r\n                        {/* Line graph */}\r\n                        <VictoryLine\r\n                            data={dailyData}\r\n                            animate={{\r\n                                duration: 1000,\r\n                                onLoad: { duration: 2000 }\r\n                            }}\r\n                        />\r\n\r\n                        {/* Data with noise removed */}\r\n                        <VictoryLine\r\n                            name='noise'\r\n                            data={deletedNoiseArray}\r\n                            style={{\r\n                                data: { stroke: \"#c43a31\" }\r\n                            }}\r\n                            animate={{\r\n                                duration: 1000,\r\n                                onLoad: { duration: 2000 }\r\n                            }}\r\n                        />\r\n\r\n                        {/* Scatter plot */}\r\n                        <VictoryScatter\r\n                            name='points'\r\n                            data={dailyData}\r\n                            animate={{\r\n                                duration: 1000,\r\n                                onLoad: { duration: 2000 }\r\n                            }}\r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n\r\n                {/* Input field and date selector */}\r\n                <div className='mt5' style={{ 'width': '300px' }}>\r\n                    <div className='center'>\r\n\r\n                        {/* Enter number field */}\r\n                        <div className='mb3 overflow-auto'  >\r\n                            <DataEntryField updateDailyData={updateDailyData} />\r\n                        </div>\r\n\r\n                        {/* Select date */}\r\n                        <div>\r\n                            <DateSelect setDate={setDate} />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DailyChart;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryBar, VictoryAxis, VictoryVoronoiContainer, VictoryLabel } from 'victory';\r\n// import DateSelectAvg from './DateSelectAvg';\r\n\r\nclass DailyAverageChart extends Component {\r\n    render() {\r\n        const { dailyAverageData, xPadding, yPadding } = this.props;\r\n\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'November', 'December'] // Array of month names\r\n        \r\n        let dailyAverageDataMonth = ''; // Declare month name var\r\n\r\n        // If dailyAverageData has data in it, get the month name\r\n        if(dailyAverageData.length > 0) {\r\n            dailyAverageDataMonth = months[parseInt(dailyAverageData[0]['x'].substring(5,7)) - 1];\r\n        }\r\n\r\n        return (\r\n            <div className='mw6 center'>\r\n                {/* Chart */}\r\n                <VictoryChart\r\n                    theme={VictoryTheme.material}\r\n                    domainPadding={{ x: [50, 90] }} // Fix overlapping/cutoff problem\r\n\r\n                    // Component allows hovering over data for information\r\n                    containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                            labels={({ datum }) => `${datum.x} average: ${+datum.y.toFixed(2)} catches`}\r\n                            voronoiBlacklist={['points']}\r\n                        />\r\n                    }\r\n                >\r\n                    <VictoryLabel text={dailyAverageData.length > 0 ? `Average catches ${dailyAverageDataMonth}` : ''} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                    {/* Axes and labels */}\r\n                    <VictoryAxis\r\n                        style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }}\r\n                        label='Day'\r\n                        fixLabelOverlap\r\n                        tickValues={\r\n                            dailyAverageData.length === 0 ? [0, 1] : dailyAverageData.map((data) => data.y)\r\n                        }\r\n                    />\r\n                    <VictoryAxis\r\n                        style={{ axisLabel: { padding: yPadding } }}\r\n                        dependentAxis\r\n                        label='Average Number Catches'\r\n                        fixLabelOverlap\r\n                        tickValues={\r\n                            dailyAverageData.length === 0 ? [0, 1] : []\r\n                        }\r\n                    />\r\n\r\n                    {/* Line graph */}\r\n                    <VictoryBar\r\n                        data={dailyAverageData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n                </VictoryChart>\r\n\r\n                {/* <DateSelectAvg></DateSelectAvg> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DailyAverageChart;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className=\"row navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <NavLink exact className=\"ml3 navbar-brand\" activeClassName='' to='/'>Juggling Hell</NavLink>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNavAltMarkup\">\r\n                <ul className=\"nav navbar-nav\">\r\n                    <li>\r\n                        <NavLink exact className=\"Nav__link tab nav-item nav-link\" activeClassName='active' to='/'>Daily Catches</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink exact className=\"Nav__link tab nav-item nav-link\" activeClassName='active' to='/average'>Average</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav >\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component, Suspense } from 'react';\nimport DailyChart from '../Components/DailyChart';\nimport DailyAverageChart from '../Components/DailyAverageChart';\n\nimport Nav from '../Components/Nav';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nlet dailyData = [];\n\nlet dailyAverageData = [];\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dailyData: dailyData,\n      dailyAverageData: dailyAverageData,\n      date: new Date(),\n    }\n  }\n\n  // Update state and get data when app opened\n  componentDidMount() {\n    this.setDate(this.state.date);\n    this.getAverageData(this.state.date);\n  }\n\n  render() {\n    // Padding for the graphs cause otherwise the labels overlap\n    // the numbers and it looks like hot garbage\n    const xPadding = 30;\n    const yPadding = 40;\n\n    dailyData = this.state.dailyData;\n    dailyAverageData = this.state.dailyAverageData;\n\n    return (\n      <Router basename='/juggling-graph'>\n        <Nav></Nav>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            {/* Daily catches graph */}\n            <Route exact render={(props) => <DailyChart {...props} setDate={this.setDate} dailyData={dailyData} updateDailyData={this.updateDailyData} xPadding={xPadding} yPadding={yPadding} date={this.state.date} />} path='/' />\n\n            {/* Daily average catches graph */}\n            <Route exact render={(props) => <DailyAverageChart {...props} dailyAverageData={dailyAverageData} xPadding={xPadding} yPadding={yPadding} />} path='/average' />\n\n            {/* Default */}\n            <Route component={Error} path='*' />\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n  }\n\n  // Change date to date selected on calendar\n  setDate = (date) => {\n    // Reformat the date to make it easier to pass into DB/title\n    const year = date.getFullYear().toString();\n    let month = (date.getMonth() + 1).toString();\n    let day = date.getDate().toString();\n\n    if (month.length === 1) {\n      month = '0' + month;\n    }\n\n    if (day.length === 1) {\n      day = '0' + day;\n    }\n\n    const fullDate = `${year}-${month}-${day}`;\n\n    // Need to call changeGraph like this so that\n    // it has access to the updated state\n    this.setState({ date: fullDate }, () => this.changeGraph());\n  }\n\n  // Update the graph\n  changeGraph = () => {\n    fetch('https://obscure-river-59718.herokuapp.com/dailygraph', {\n      method: 'post', // Can't pass in body if it's a GET\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        newDate: this.state.date // Pass in the new date\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        // Change the dailyData to reflect the new date\n        // TODO: Don't set up initial dailyData like this. Idea: update DB to include a 0 catch every day\n        dailyData = [{ x: 0, y: 0 }].concat(data.map((num, index) => ({ x: index + 1, y: parseInt(num.catches) })));\n        this.setState({ dailyData });\n      });\n  }\n\n  // Update DB/graph when data is input\n  updateDailyData = (catches) => {\n    fetch('https://obscure-river-59718.herokuapp.com/dailyupdate', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        catches: catches\n      })\n    })\n      .then(response => response.json())\n      .then((res) => {\n        // Update the state\n        // I COULD call changeGraph but that would just take too much time tbh\n        // TODO: Is there a better way to do this? Combine this function and changeGraph somehow?\n        dailyData.push({ x: dailyData.length, y: res.catches })\n        this.setState({ dailyData })\n      })\n      .then(() => this.getAverageData());\n  }\n\n  // Get average data graph\n  getAverageData = (date) => {\n    const year = date.getFullYear().toString();\n    let month = (date.getMonth() + 1).toString();\n\n    if (month.length === 1) {\n      month = '0' + month;\n    }\n\n    const selectedMonth = year + '-' + month;\n\n\n\n    fetch('https://obscure-river-59718.herokuapp.com/averagegraph', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        selectedMonth: selectedMonth\n      })\n    })\n      .then(response => response.json())\n      .then((avgdata) => {\n        dailyAverageData = avgdata.map((dat, index) => ({ x: dat.to_char, y: parseFloat(dat.avg) }));\n        this.setState({ dailyAverageData });\n      })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport 'react-datepicker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}