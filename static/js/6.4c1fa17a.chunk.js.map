{"version":3,"sources":["Components/DateSelectAvg.js","Components/DailyAverageChart.js"],"names":["DateSelectAvg","averageDate","setDate","className","selected","onChange","date","dateFormat","showMonthYearPicker","defaultProps","Date","DailyAverageChart","getStyles","xPadding","yPadding","xAxis","axisLabel","padding","fill","axis","stroke","tickLabels","ticks","yAxis","average","data","sessionStorage","setItem","getAverageData","getItem","year","getFullYear","toString","month","getMonth","length","selectedMonth","fetch","method","headers","body","JSON","stringify","then","response","json","avgdata","setState","prevState","props","dailyAverageData","map","dat","x","parseInt","to_char","substring","y","parseFloat","avg","state","this","changeCurrentPath","location","pathname","currentDate","dailyAverageDataMonth","styles","style","backgroundColor","width","theme","VictoryTheme","material","domainPadding","text","textAnchor","label","fixLabelOverlap","dependentAxis","display","zIndex","labels","datum","toFixed","labelComponent","constrainToVisibleArea","animate","duration","onLoad","Component","withRouter"],"mappings":"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","file":"static/js/6.4c1fa17a.chunk.js","sourcesContent":["import React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst DateSelectAvg = ({ averageDate, setDate }) => {\r\n  return (\r\n    <div>\r\n      <DatePicker\r\n        className=\"br3 pl2 blue bg-light-gray\"\r\n        selected={averageDate}\r\n        onChange={date => setDate(date)}\r\n        dateFormat=\"MM/yyyy\"\r\n        showMonthYearPicker\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nDateSelectAvg.propTypes = {\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  averageDate: PropTypes.object,\r\n  setDate: PropTypes.func\r\n};\r\n\r\nDateSelectAvg.defaultProps = {\r\n  averageDate: new Date(),\r\n  setDate: null\r\n};\r\n\r\nexport default DateSelectAvg;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  VictoryTheme,\r\n  VictoryChart,\r\n  VictoryBar,\r\n  VictoryAxis,\r\n  VictoryLabel,\r\n  VictoryTooltip\r\n} from 'victory';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DateSelectAvg from './DateSelectAvg';\r\nimport './Chart.css';\r\n\r\nclass DailyAverageChart extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dailyAverageData: []\r\n    };\r\n  }\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Update storage and get data when app opened\r\n  componentDidMount() {\r\n    const { changeCurrentPath, location } = this.props;\r\n\r\n    if (sessionStorage.getItem('avgdate')) {\r\n      this.setDate(new Date(sessionStorage.getItem('avgdate')));\r\n    }\r\n\r\n    changeCurrentPath(location.pathname);\r\n  }\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Returns the styles for the graph\r\n  getStyles = (xPadding, yPadding) => {\r\n    return {\r\n      xAxis: {\r\n        axisLabel: { padding: xPadding, fill: 'black' },\r\n        axis: { padding: 100, stroke: 'black' },\r\n        tickLabels: { fill: 'black' },\r\n        ticks: { stroke: 'black' }\r\n      },\r\n      yAxis: {\r\n        axisLabel: { padding: yPadding, fill: 'black' },\r\n        axis: { stroke: 'black' },\r\n        tickLabels: { fill: 'black' },\r\n        ticks: { stroke: 'black' }\r\n      },\r\n      average: {\r\n        data: { stroke: '#c43a31' }\r\n      }\r\n    };\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Change date to date selected on calendar\r\n  setDate = date => {\r\n    sessionStorage.setItem('avgdate', date);\r\n\r\n    this.getAverageData(new Date(sessionStorage.getItem('avgdate')));\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Get average data graph\r\n  getAverageData = date => {\r\n    // Stringify date\r\n    const year = date.getFullYear().toString();\r\n    let month = (date.getMonth() + 1).toString();\r\n\r\n    if (month.length === 1) {\r\n      month = `0${month}`;\r\n    }\r\n\r\n    const selectedMonth = `${year}-${month}`;\r\n\r\n    // Call to backend\r\n    fetch('https://obscure-river-59718.herokuapp.com/averagegraph', {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        selectedMonth\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(avgdata => {\r\n        this.setState((prevState, props) => {\r\n          const newState = avgdata.map(dat => ({\r\n            x: parseInt(dat.to_char.substring(8, 10), 10),\r\n            y: parseFloat(dat.avg)\r\n          }));\r\n          return { dailyAverageData: newState };\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { xPadding, yPadding } = this.props;\r\n    const { dailyAverageData } = this.state;\r\n\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ]; // Array of month names\r\n\r\n    const currentDate = new Date(sessionStorage.getItem('avgdate'));\r\n\r\n    const dailyAverageDataMonth = months[currentDate.getMonth()]; // Declare month name var\r\n\r\n    const styles = this.getStyles(xPadding, yPadding);\r\n\r\n    return (\r\n      <div className=\"mt3 flex justify-center\">\r\n        <div\r\n          className=\"cont flex justify-center mt2 mb3 pl3 pr3 ba bw1\"\r\n          style={{ backgroundColor: '#ECD9BA' }}\r\n        >\r\n          <div className=\"chart mr3\" style={{ width: '600px' }}>\r\n            {/* Chart */}\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              domainPadding={{ x: [50, 30], y: [50, 30] }} // Fix overlapping/cutoff problem\r\n            >\r\n              {/* Title */}\r\n              <VictoryLabel\r\n                text={`Average catches ${dailyAverageDataMonth}`}\r\n                x={180}\r\n                y={30}\r\n                textAnchor=\"middle\"\r\n              />\r\n\r\n              {/* Axes and labels */}\r\n              <VictoryAxis style={styles.xAxis} label=\"Day\" fixLabelOverlap />\r\n              <VictoryAxis\r\n                style={styles.yAxis}\r\n                dependentAxis\r\n                label=\"Average Catches\"\r\n                fixLabelOverlap\r\n              />\r\n\r\n              {/* Displays if there is no data available */}\r\n              <VictoryLabel\r\n                text=\"No data available\"\r\n                x={180}\r\n                y={180}\r\n                textAnchor=\"middle\"\r\n                style={\r\n                  dailyAverageData.length === 0\r\n                    ? null\r\n                    : { display: 'none', zIndex: '100' }\r\n                }\r\n              />\r\n\r\n              {/* Bar graph */}\r\n              <VictoryBar\r\n                data={dailyAverageData}\r\n                labels={\r\n                  ({ datum }) =>\r\n                    `${datum.x} average: ${+datum.y.toFixed(2)} catches`\r\n                  // eslint-disable-next-line react/jsx-curly-newline\r\n                }\r\n                labelComponent={<VictoryTooltip constrainToVisibleArea />}\r\n                animate={{\r\n                  duration: 1000,\r\n                  onLoad: { duration: 0 }\r\n                }}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n\r\n          {/* Date picker */}\r\n          <div className=\"date ml3 mt5 center\" style={{ width: '225px' }}>\r\n            <h3>Select date:</h3>\r\n            <DateSelectAvg setDate={this.setDate} averageDate={currentDate} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDailyAverageChart.propTypes = {\r\n  changeCurrentPath: PropTypes.func,\r\n  location: PropTypes.object, // eslint-disable-line react/forbid-prop-types\r\n  xPadding: PropTypes.number,\r\n  yPadding: PropTypes.number\r\n};\r\n\r\nDailyAverageChart.defaultProps = {\r\n  changeCurrentPath: null,\r\n  location: null,\r\n  xPadding: null,\r\n  yPadding: null\r\n};\r\n\r\nexport default withRouter(DailyAverageChart);\r\n"],"sourceRoot":""}