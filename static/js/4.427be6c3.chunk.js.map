{"version":3,"sources":["Components/DateSelect.js","Components/DataEntryField.js","Components/DailyChart.js"],"names":["DateSelect","date","setDate","className","selected","onChange","newDate","defaultProps","Date","DataEntryField","submitData","event","updateDailyData","props","preventDefault","num","parseInt","target","value","reset","guest","localStorage","getItem","state","onSubmit","this","style","outline","type","placeholder","disabled","Component","DailyChart","getStyles","xPadding","yPadding","xAxis","axisLabel","padding","fill","axis","stroke","tickLabels","ticks","yAxis","average","data","removeNoise","chunk","catchPoints","slice","map","val","y","length","deletedNoiseArray","acc","i","push","stringifyDate","year","getFullYear","toString","month","getMonth","day","getDate","sessionStorage","setItem","getDailyData","fullDate","fetch","method","headers","body","JSON","stringify","then","response","json","setState","prevState","dailyData","x","concat","index","catches","res","createAverageLine","ind","calculateAverage","reduce","toFixed","changeCurrentPath","location","pathname","currentDate","titleDate","isThereData","styles","backgroundColor","width","theme","VictoryTheme","material","domainPadding","text","textAnchor","label","fixLabelOverlap","dependentAxis","display","zIndex","animate","duration","onLoad","name","labels","datum","labelComponent","constrainToVisibleArea","withRouter"],"mappings":"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","file":"static/js/4.427be6c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst DateSelect = ({ date, setDate }) => {\r\n  return (\r\n    <div>\r\n      <DatePicker\r\n        className=\"br3 pl2 blue bg-light-gray\"\r\n        selected={date}\r\n        onChange={newDate => setDate(newDate)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nDateSelect.propTypes = {\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  date: PropTypes.object,\r\n  setDate: PropTypes.func\r\n};\r\n\r\nDateSelect.defaultProps = {\r\n  date: new Date(),\r\n  setDate: null\r\n};\r\n\r\nexport default DateSelect;\r\n","import React, { Component } from 'react';\r\nimport './Input.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass DataEntryField extends Component {\r\n  // When data is entered into the input field\r\n  submitData = event => {\r\n    const { updateDailyData } = this.props;\r\n\r\n    event.preventDefault(); // Prevent page from refreshing when submitted\r\n\r\n    const num = parseInt(event.target[0].value, 10); // Get value\r\n    event.target.reset(); // Reset field\r\n\r\n    updateDailyData(num);\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  render() {\r\n    const guest = localStorage.getItem('guest');\r\n    const sandbox = localStorage.getItem('sandbox');\r\n\r\n    // Which button did the user press at the start\r\n    let state = '';\r\n    if (guest === 'true') {\r\n      state = '(disabled as guest)';\r\n    }\r\n\r\n    if (sandbox === 'true') {\r\n      state = '(sandbox)';\r\n    }\r\n\r\n    return (\r\n      // Form\r\n      <form onSubmit={this.submitData}>\r\n        <div className=\"\">\r\n          {/* Input field */}\r\n          <div>\r\n            <input\r\n              className={`f6 mb2 input-reset fl black-80 pa3 lh-solid w-100 w-75-m w-80-l br3 b--black ${\r\n                guest === 'true' ? 'bg-moon-gray' : 'bg-white'\r\n              }`}\r\n              style={{ outline: 'none' }}\r\n              type=\"number\"\r\n              placeholder={`Number of catches ${state}`}\r\n              disabled={guest === 'true' ? true : null}\r\n            />\r\n          </div>\r\n\r\n          {/* Submit button */}\r\n          <div>\r\n            <input\r\n              className={`f6 button-reset pv3 tc bn bg-green hover-bg-green white w-50 w-25-m w-20-l br3 ${\r\n                guest === 'true' ? null : 'pointer'\r\n              }`}\r\n              style={{ outline: 'none' }}\r\n              type=\"submit\"\r\n              value=\"Add\"\r\n              disabled={guest === 'true' ? true : null}\r\n            />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nDataEntryField.propTypes = {\r\n  updateDailyData: PropTypes.func\r\n};\r\n\r\nDataEntryField.defaultProps = {\r\n  updateDailyData: null\r\n};\r\n\r\nexport default DataEntryField;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  VictoryTheme,\r\n  VictoryChart,\r\n  VictoryLine,\r\n  VictoryAxis,\r\n  VictoryScatter,\r\n  VictoryLabel,\r\n  VictoryTooltip\r\n} from 'victory';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DateSelect from './DateSelect';\r\nimport DataEntryField from './DataEntryField';\r\nimport './Chart.css';\r\n\r\nclass DailyChart extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dailyData: []\r\n    };\r\n  }\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Update storage and get data when app opened\r\n  componentDidMount() {\r\n    const { changeCurrentPath, location } = this.props;\r\n\r\n    if (sessionStorage.getItem('date')) {\r\n      this.setDate(new Date(sessionStorage.getItem('date')));\r\n    }\r\n\r\n    changeCurrentPath(location.pathname);\r\n  }\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  getStyles = (xPadding, yPadding) => {\r\n    return {\r\n      xAxis: {\r\n        axisLabel: { padding: xPadding, fill: 'black' },\r\n        axis: { padding: 100, stroke: 'black' },\r\n        tickLabels: { fill: 'black' },\r\n        ticks: { stroke: 'black' }\r\n      },\r\n      yAxis: {\r\n        axisLabel: { padding: yPadding, fill: 'black' },\r\n        axis: { stroke: 'black' },\r\n        tickLabels: { fill: 'black' },\r\n        ticks: { stroke: 'black' }\r\n      },\r\n      average: {\r\n        data: { stroke: '#c43a31' }\r\n      }\r\n    };\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Removes noise from data by taking average every chunk-sized chunks\r\n  removeNoise = (data, chunk) => {\r\n    const catchPoints = data.slice(1).map(val => val.y); // Isolate catch data\r\n    const { length } = catchPoints;\r\n    const deletedNoiseArray = [0]; // Start with zero\r\n    let acc = 0;\r\n\r\n    // Remove noise\r\n    for (let i = 0; i < length; i++) {\r\n      // If chunk size is reached, push in average for that chunk\r\n      // and reset the acc to 0\r\n      if (!(i % chunk) && i !== 0) {\r\n        deletedNoiseArray.push(acc / chunk);\r\n        acc = 0;\r\n      }\r\n\r\n      // Accumulate sum\r\n      acc += catchPoints[i];\r\n\r\n      // If length is divisible by chunk, just push average for chunk size\r\n      if (!(length % chunk) && i === length - 1) {\r\n        deletedNoiseArray.push(acc / chunk);\r\n      }\r\n\r\n      // Else if we are at the last element, just push in average for however much was left\r\n      else if (i === length - 1) {\r\n        deletedNoiseArray.push(acc / (length % chunk));\r\n      }\r\n    }\r\n\r\n    // Return final array\r\n    return deletedNoiseArray;\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Turn date into a string\r\n  stringifyDate = date => {\r\n    // Reformat the date to make it easier to pass into DB/title\r\n    const year = date.getFullYear().toString();\r\n    let month = (date.getMonth() + 1).toString();\r\n    let day = date.getDate().toString();\r\n\r\n    if (month.length === 1) {\r\n      month = `0${month}`;\r\n    }\r\n\r\n    if (day.length === 1) {\r\n      day = `0${day}`;\r\n    }\r\n\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Change date to date selected on calendar\r\n  setDate = date => {\r\n    sessionStorage.setItem('date', date);\r\n\r\n    this.getDailyData(new Date(sessionStorage.getItem('date')));\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Get graph data for a certain day\r\n  getDailyData = date => {\r\n    // Reformat the date to make it easier to pass into DB/title\r\n    const fullDate = this.stringifyDate(date);\r\n\r\n    // Call to backend to get data\r\n    fetch('https://obscure-river-59718.herokuapp.com/dailygraph', {\r\n      method: 'post', // Can't pass in body if it's a GET\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        newDate: fullDate // Pass in the new date\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Change the dailyData to reflect the new date\r\n        this.setState((prevState, props) => {\r\n          const newData = [{ x: 0, y: 0 }].concat(\r\n            data.map((num, index) => ({\r\n              x: index + 1,\r\n              y: parseInt(num.catches, 10)\r\n            }))\r\n          );\r\n          return { dailyData: newData };\r\n        });\r\n      });\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  // Update DB/graph when data is input\r\n  updateDailyData = catches => {\r\n    const { dailyData } = this.state;\r\n\r\n    if (localStorage.getItem('sandbox') === 'true') {\r\n      this.setState((prevState, props) => {\r\n        dailyData.push({\r\n          x: prevState.length,\r\n          y: catches\r\n        });\r\n        return { dailyData };\r\n      });\r\n      return;\r\n    }\r\n\r\n    fetch('https://obscure-river-59718.herokuapp.com/dailyupdate', {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        catches\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.getDailyData(new Date(sessionStorage.getItem('date')));\r\n        return res;\r\n      })\r\n      .then(res => {\r\n        sessionStorage.setItem('date', new Date());\r\n\r\n        this.setState((prevState, props) => {\r\n          dailyData.push({\r\n            x: prevState.length,\r\n            y: catches\r\n          });\r\n          return { dailyData };\r\n        });\r\n      });\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  createAverageLine = (dailyData, chunk) => {\r\n    return this.removeNoise(dailyData, chunk).map((val, ind) => ({\r\n      x: ind * 5,\r\n      y: val\r\n    }));\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  calculateAverage = dailyData => {\r\n    return (\r\n      dailyData.reduce((acc, val) => acc + val.y, 0) /\r\n      (dailyData.length - 1)\r\n    ).toFixed(2);\r\n  };\r\n\r\n  /* ////////////////////////////////////////////////////////////////////////// */\r\n\r\n  render() {\r\n    const { xPadding, yPadding } = this.props; // Padding for charts\r\n    const { dailyData } = this.state;\r\n\r\n    // Data for average line\r\n    let deletedNoiseArray = [];\r\n    const chunk = 5;\r\n\r\n    // Create average line data\r\n    if (dailyData.length > 1) {\r\n      deletedNoiseArray = this.createAverageLine(dailyData, chunk);\r\n    }\r\n\r\n    const currentDate = new Date(sessionStorage.getItem('date')); // Current presented date\r\n\r\n    const titleDate = this.stringifyDate(currentDate); // Date for title\r\n\r\n    const isThereData = dailyData.length === 1; // Is there any data besides the 0\r\n\r\n    // If there is data, calculate the average\r\n    const average = isThereData ? 0 : this.calculateAverage(dailyData); // Average\r\n\r\n    const styles = this.getStyles(xPadding, yPadding); // Chart styles\r\n\r\n    return (\r\n      <div className=\"mt3 flex justify-center\">\r\n        <div\r\n          className=\"cont flex justify-center mt2 mb3 pl3 pr3 ba br3 bw1\"\r\n          style={{ backgroundColor: '#ECD9BA' }}\r\n        >\r\n          <div className=\"chart mr3 bw1\" style={{ width: '600px' }}>\r\n            <VictoryChart\r\n              className=\"mt6\"\r\n              theme={VictoryTheme.material}\r\n              domainPadding={{ x: [0, 30], y: [0, 30] }} // Fix weird cutoff problem sort of\r\n            >\r\n              {/* Title */}\r\n              <VictoryLabel\r\n                text={`Catches ${titleDate}`}\r\n                x={180}\r\n                y={30}\r\n                textAnchor=\"middle\"\r\n              />\r\n\r\n              {/* Axes and labels */}\r\n              <VictoryAxis\r\n                style={styles.xAxis}\r\n                label=\"Attempt\"\r\n                fixLabelOverlap\r\n              />\r\n              <VictoryAxis\r\n                style={styles.yAxis}\r\n                dependentAxis\r\n                label=\"Catches\"\r\n                fixLabelOverlap\r\n              />\r\n\r\n              {/* Displays if there is no data available */}\r\n              <VictoryLabel\r\n                text=\"No data available\"\r\n                x={180}\r\n                y={180}\r\n                textAnchor=\"middle\"\r\n                style={isThereData ? null : { display: 'none', zIndex: '100' }}\r\n              />\r\n\r\n              {/* Line graph */}\r\n              <VictoryLine\r\n                data={isThereData ? [] : dailyData}\r\n                animate={{\r\n                  duration: 1000,\r\n                  onLoad: { duration: 2000 }\r\n                }}\r\n              />\r\n\r\n              {/* Data with noise removed */}\r\n              <VictoryLine\r\n                name=\"noise\"\r\n                data={deletedNoiseArray}\r\n                style={styles.average}\r\n                animate={{\r\n                  duration: 1000,\r\n                  onLoad: { duration: 2000 }\r\n                }}\r\n              />\r\n\r\n              {/* Scatter plot */}\r\n              <VictoryScatter\r\n                name=\"points\"\r\n                data={isThereData ? [] : dailyData}\r\n                labels={({ datum }) => `Attempt ${datum.x}: ${datum.y} catches`} // Component allows hovering over data for information\r\n                labelComponent={<VictoryTooltip constrainToVisibleArea />}\r\n                animate={{\r\n                  duration: 1000,\r\n                  onLoad: { duration: 2000 }\r\n                }}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n\r\n          {/* Input field and date selector */}\r\n          <div className=\"ml3 mt5\" style={{ width: '300px' }}>\r\n            <div className=\"center\">\r\n              {/* Enter number field */}\r\n              <div className=\"overflow-auto\">\r\n                <DataEntryField updateDailyData={this.updateDailyData} />\r\n              </div>\r\n\r\n              <div className=\"mt4\">\r\n                <h3>{`Average: ${average}`}</h3>\r\n              </div>\r\n\r\n              {/* Date picker */}\r\n              <div className=\"date mt4\">\r\n                <h3>Select date:</h3>\r\n                <DateSelect setDate={this.setDate} date={currentDate} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDailyChart.propTypes = {\r\n  changeCurrentPath: PropTypes.func,\r\n  location: PropTypes.object, // eslint-disable-line react/forbid-prop-types\r\n  xPadding: PropTypes.number,\r\n  yPadding: PropTypes.number\r\n};\r\n\r\nDailyChart.defaultProps = {\r\n  changeCurrentPath: null,\r\n  location: null,\r\n  xPadding: null,\r\n  yPadding: null\r\n};\r\n\r\nexport default withRouter(DailyChart);\r\n"],"sourceRoot":""}