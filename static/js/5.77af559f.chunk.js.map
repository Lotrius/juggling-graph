{"version":3,"sources":["Components/DateSelectAvg.js","Components/DailyAverageChart.js"],"names":["DateSelectAvg","averageDate","setDate","selected","onChange","date","dateFormat","showMonthYearPicker","dailyAverageData","sessionStorage","setItem","Date","DailyAverageChart","getAverageData","getItem","year","getFullYear","toString","month","getMonth","length","selectedMonth","fetch","method","headers","body","JSON","stringify","then","response","json","avgdata","map","dat","x","to_char","substring","y","parseFloat","avg","setState","state","this","props","changeCurrentPath","location","pathname","xPadding","yPadding","currentDate","dailyAverageDataMonth","className","theme","VictoryTheme","material","domainPadding","containerComponent","labels","datum","toFixed","voronoiBlacklist","text","textAnchor","style","axisLabel","padding","axis","label","fixLabelOverlap","dependentAxis","data","animate","duration","onLoad","Component","withRouter"],"mappings":"sQAiBeA,G,OAbO,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAClC,OACI,6BACI,kBAAC,IAAD,CACIC,SAAUF,EACVG,SAAU,SAAAC,GAAI,OAAIH,EAAQG,IAC1BC,WAAW,UACXC,qBAAmB,O,QCN/BC,EAAmB,GAEvBC,eAAeC,QAAQ,UAAW,IAAIC,M,IAEhCC,E,YACF,aAAe,IAAD,8BACV,+CA+EJV,QAAU,SAACG,GACPI,eAAeC,QAAQ,UAAWL,GAElC,EAAKQ,eAAe,IAAIF,KAAKF,eAAeK,QAAQ,cAnF1C,EAyFdD,eAAiB,SAACR,GAEd,IAAMU,EAAOV,EAAKW,cAAcC,WAC5BC,GAASb,EAAKc,WAAa,GAAGF,WAEb,IAAjBC,EAAME,SACNF,EAAQ,IAAMA,GAGlB,IAAMG,EAAgBN,EAAO,IAAMG,EAGnCI,MAAM,yDAA0D,CAC5DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBN,cAAeA,MAGlBO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GACHvB,EAAmBuB,EAAQC,IAAI,SAACC,GAAD,MAAU,CAAEC,EAAGD,EAAIE,QAAQC,UAAU,EAAG,IAAKC,EAAGC,WAAWL,EAAIM,QAC9F,EAAKC,SAAS,CAAEhC,wBA7GxB,EAAKiC,MAAQ,CACTjC,iBAAkBA,GAHZ,E,iFAWNC,eAAeK,QAAQ,YACvB4B,KAAKxC,QAAQ,IAAIS,KAAKF,eAAeK,QAAQ,aAGjD4B,KAAKC,MAAMC,kBAAkBF,KAAKC,MAAME,SAASC,Y,+BAK3C,IAAD,EAC0BJ,KAAKC,MAA5BI,EADH,EACGA,SAAUC,EADb,EACaA,SAIdC,EAAc,IAAItC,KAAKF,eAAeK,QAAQ,YAE9CoC,EAJW,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAI1FD,EAAY9B,YAEhD,OACI,yBAAKgC,UAAU,cAEX,kBAAC,IAAD,CACIC,MAAOC,IAAaC,SACpBC,cAAe,CAAErB,EAAG,CAAC,GAAI,IAAKG,EAAG,CAAC,GAAI,KAGtCmB,mBACI,kBAAC,IAAD,CACIC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBA,EAAMxB,EAAxB,sBAAuCwB,EAAMrB,EAAEsB,QAAQ,GAAvD,aACRC,iBAAkB,CAAC,aAM3B,kBAAC,IAAD,CAAcC,KAAI,0BAAqBX,GAAyBhB,EAAG,IAAKG,EAAG,GAAIyB,WAAW,WAG1F,kBAAC,IAAD,CACIC,MAAO,CAAEC,UAAW,CAAEC,QAASlB,GAAYmB,KAAM,CAAED,QAAS,MAC5DE,MAAM,MACNC,iBAAe,IAEnB,kBAAC,IAAD,CACIL,MAAO,CAAEC,UAAW,CAAEC,QAASjB,IAC/BqB,eAAa,EACbF,MAAM,kBACNC,iBAAe,IAInB,kBAAC,IAAD,CACIE,KAAM9D,EACN+D,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,OAMhC,kBAAC,EAAD,CAAetE,QAASwC,KAAKxC,QAASD,YAAagD,S,GAzEnCyB,aAqHjBC,sBAAW/D","file":"static/js/5.77af559f.chunk.js","sourcesContent":["import React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst DateSelectAvg = ({ averageDate, setDate }) => {\r\n    return (\r\n        <div >\r\n            <DatePicker\r\n                selected={averageDate}\r\n                onChange={date => setDate(date)}\r\n                dateFormat=\"MM/yyyy\"\r\n                showMonthYearPicker\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateSelectAvg;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryBar, VictoryAxis, VictoryVoronoiContainer, VictoryLabel } from 'victory';\r\nimport DateSelectAvg from './DateSelectAvg';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nlet dailyAverageData = [];\r\n\r\nsessionStorage.setItem('avgdate', new Date());\r\n\r\nclass DailyAverageChart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dailyAverageData: dailyAverageData,\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update storage and get data when app opened\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem('avgdate')) {\r\n            this.setDate(new Date(sessionStorage.getItem('avgdate')));\r\n        }\r\n\r\n        this.props.changeCurrentPath(this.props.location.pathname);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        const { xPadding, yPadding } = this.props;\r\n\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] // Array of month names\r\n\r\n        var currentDate = new Date(sessionStorage.getItem('avgdate'));\r\n\r\n        let dailyAverageDataMonth = months[(currentDate.getMonth())]; // Declare month name var\r\n\r\n        return (\r\n            <div className='mw6 center'>\r\n                {/* Chart */}\r\n                <VictoryChart\r\n                    theme={VictoryTheme.material}\r\n                    domainPadding={{ x: [50, 30], y: [50, 30] }} // Fix overlapping/cutoff problem\r\n\r\n                    // Component allows hovering over data for information\r\n                    containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                            labels={({ datum }) => `${datum.x} average: ${+datum.y.toFixed(2)} catches`}\r\n                            voronoiBlacklist={['points']}\r\n                        />\r\n                    }\r\n                >\r\n\r\n                    {/* Title */}\r\n                    <VictoryLabel text={`Average catches ${dailyAverageDataMonth}`} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                    {/* Axes and labels */}\r\n                    <VictoryAxis\r\n                        style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }}\r\n                        label='Day'\r\n                        fixLabelOverlap\r\n                    />\r\n                    <VictoryAxis\r\n                        style={{ axisLabel: { padding: yPadding } }}\r\n                        dependentAxis\r\n                        label='Average Catches'\r\n                        fixLabelOverlap\r\n                    />\r\n\r\n                    {/* Bar graph */}\r\n                    <VictoryBar\r\n                        data={dailyAverageData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n                </VictoryChart>\r\n\r\n                {/* Date picker */}\r\n                <DateSelectAvg setDate={this.setDate} averageDate={currentDate} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Change date to date selected on calendar\r\n    setDate = (date) => {\r\n        sessionStorage.setItem('avgdate', date);\r\n        \r\n        this.getAverageData(new Date(sessionStorage.getItem('avgdate')));\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Get average data graph\r\n    getAverageData = (date) => {\r\n        // Stringify date\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        const selectedMonth = year + '-' + month;\r\n\r\n        // Call to backend\r\n        fetch('https://obscure-river-59718.herokuapp.com/averagegraph', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                selectedMonth: selectedMonth\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then((avgdata) => {\r\n                dailyAverageData = avgdata.map((dat) => ({ x: dat.to_char.substring(8, 10), y: parseFloat(dat.avg) }));\r\n                this.setState({ dailyAverageData });\r\n            })\r\n    }\r\n}\r\n\r\nexport default withRouter(DailyAverageChart);"],"sourceRoot":""}