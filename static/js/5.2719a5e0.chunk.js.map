{"version":3,"sources":["Components/DateSelect.js","Components/DataEntryField.js","Components/DailyChart.js"],"names":["DateSelect","date","this","props","className","selected","onChange","setDate","Component","DataEntryField","submitData","event","preventDefault","num","parseInt","refs","input","value","isNaN","updateDailyData","guest","onSubmit","type","placeholder","ref","disabled","dailyData","DailyChart","getStyles","xPadding","yPadding","xAxis","axisLabel","padding","fill","axis","stroke","tickLabels","ticks","yAxis","average","data","removeNoise","chunk","catchPoints","slice","map","val","y","length","deletedNoiseArray","acc","i","push","stringifyDate","year","getFullYear","toString","month","getMonth","day","getDate","sessionStorage","setItem","getDailyData","Date","getItem","fullDate","fetch","method","headers","body","JSON","stringify","newDate","then","response","json","x","concat","index","catches","setState","res","state","changeCurrentPath","location","pathname","ind","currentDate","titleDate","reduce","toFixed","styles","style","backgroundColor","theme","VictoryTheme","material","domainPadding","containerComponent","labels","datum","voronoiBlacklist","text","textAnchor","label","fixLabelOverlap","dependentAxis","animate","duration","onLoad","name","withRouter"],"mappings":"gRAiBeA,G,wLAZH,IAAD,OACCC,EAASC,KAAKC,MAAdF,KAER,OACE,6BACE,kBAAC,IAAD,CAAYG,UAAU,GAAGC,SAAUJ,EAAMK,SAAU,SAAAL,GAAI,OAAI,EAAKE,MAAMI,QAAQN,W,GAN7DO,cCmDVC,E,2MAhBXC,WAAa,SAACC,GACVA,EAAMC,iBAEN,IAAMC,EAAMC,SAAS,EAAKC,KAAKC,MAAMC,MAAO,IAIxCC,MAAML,GACN,EAAKE,KAAKC,MAAMC,MAAQ,IAExB,EAAKF,KAAKC,MAAMC,MAAQ,GACxB,EAAKd,MAAMgB,gBAAgBN,K,wEA/CzB,IACEO,EAAUlB,KAAKC,MAAfiB,MAER,OAEI,0BAAMC,SAAUnB,KAAKQ,YACjB,yBAAKN,UAAU,IAGX,6BACI,2BACIA,UAAS,wFAA6F,SAAVgB,EAAmB,eAAiB,YAChIE,KAAK,OACLC,YAAW,4BAAiC,SAAVH,EAAmB,sBAAwB,IAC7EI,IAAI,QACJC,SAAoB,SAAVL,GAA0B,QAK5C,6BACI,2BACIhB,UAAS,yFAA8F,SAAVgB,EAAmB,KAAO,WACvHE,KAAK,SACLL,MAAM,MACNQ,SAAoB,SAAVL,GAA0B,c,GA1BnCZ,a,OCKzBkB,G,MAAY,IAEVC,E,YACF,aAAe,IAAD,8BACV,+CAqIJC,UAAY,SAACC,EAAUC,GACnB,MAAO,CACHC,MAAO,CACHC,UAAW,CAAEC,QAASJ,EAAUK,KAAM,SACtCC,KAAM,CAAEF,QAAS,IAAKG,OAAQ,SAC9BC,WAAY,CAAEH,KAAM,SACpBI,MAAO,CAAEF,OAAQ,UAErBG,MAAO,CACHP,UAAW,CAAEC,QAASH,EAAUI,KAAM,SACtCC,KAAM,CAAEC,OAAQ,SAChBC,WAAY,CAAEH,KAAM,SACpBI,MAAO,CAAEF,OAAQ,UAErBI,QAAS,CACLC,KAAM,CAAEL,OAAQ,cArJd,EA6JdM,YAAc,SAACD,EAAME,GAOjB,IANA,IAAMC,EAAcH,EAAKI,MAAM,GAAGC,IAAI,SAACC,GAAD,OAASA,EAAIC,IAC7CC,EAASL,EAAYK,OACvBC,EAAoB,CAAC,GACrBC,EAAM,EAGDC,EAAI,EAAGA,EAAIH,EAAQG,IAIlBA,EAAIT,GAAiB,IAANS,IACjBF,EAAkBG,KAAKF,EAAMR,GAC7BQ,EAAM,GAIVA,GAAOP,EAAYQ,GAGbH,EAASN,GAAUS,IAAMH,EAAS,EAK/BG,IAAMH,EAAS,GACpBC,EAAkBG,KAAKF,GAAOF,EAASN,IALvCO,EAAkBG,KAAKF,EAAOR,GAUtC,OAAOO,GA5LG,EAkMdI,cAAgB,SAACrD,GAEb,IAAMsD,EAAOtD,EAAKuD,cAAcC,WAC5BC,GAASzD,EAAK0D,WAAa,GAAGF,WAC9BG,EAAM3D,EAAK4D,UAAUJ,WAUzB,OARqB,IAAjBC,EAAMT,SACNS,EAAQ,IAAMA,GAGC,IAAfE,EAAIX,SACJW,EAAM,IAAMA,GAGV,GAAN,OAAUL,EAAV,YAAkBG,EAAlB,YAA2BE,IAhNjB,EAsNdrD,QAAU,SAACN,GACP6D,eAAeC,QAAQ,OAAQ9D,GAE/B,EAAK+D,aAAa,IAAIC,KAAKH,eAAeI,QAAQ,WAzNxC,EA+NdF,aAAe,SAAC/D,GAEZ,IAAMsD,EAAOtD,EAAKuD,cAAcC,WAC5BC,GAASzD,EAAK0D,WAAa,GAAGF,WAC9BG,EAAM3D,EAAK4D,UAAUJ,WAEJ,IAAjBC,EAAMT,SACNS,EAAQ,IAAMA,GAGC,IAAfE,EAAIX,SACJW,EAAM,IAAMA,GAGhB,IAAMO,EAAQ,UAAMZ,EAAN,YAAcG,EAAd,YAAuBE,GAGrCQ,MAAM,uDAAwD,CAC1DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBC,QAASP,MAGZQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAlC,GAGFf,EAAY,CAAC,CAAEoD,EAAG,EAAG9B,EAAG,IAAK+B,OAAOtC,EAAKK,IAAI,SAACjC,EAAKmE,GAAN,MAAiB,CAAEF,EAAGE,EAAQ,EAAGhC,EAAGlC,SAASD,EAAIoE,aAC9F,EAAKC,SAAS,CAAExD,iBA5Pd,EAmQdP,gBAAkB,SAAC8D,GACfb,MAAM,wDAAyD,CAC3DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBQ,QAASA,MAGZN,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACQ,GAEH,OADA,EAAKD,SAAS,CAAEjF,KAAM,IAAIgE,MAAU,kBAAM,EAAKD,aAAa,EAAKoB,MAAMnF,QAChEkF,IAEVR,KAAK,SAACQ,GAIHzD,EAAU2B,KAAK,CAAEyB,EAAGpD,EAAUuB,OAAQD,EAAGmC,EAAIF,UAC7C,EAAKC,SAAS,CAAExD,iBAnRxB,EAAK0D,MAAQ,CACT1D,UAAWA,GAHL,E,iFAWNoC,eAAeI,QAAQ,SACvBhE,KAAKK,QAAQ,IAAI0D,KAAKH,eAAeI,QAAQ,UAGjDhE,KAAKC,MAAMkF,kBAAkBnF,KAAKC,MAAMmF,SAASC,Y,+BAK3C,IAAD,EAC0BrF,KAAKC,MAA5B0B,EADH,EACGA,SAAUC,EADb,EACaA,SAGdoB,EAAoB,GAIpBxB,EAAUuB,OAAS,IACnBC,EAAoBhD,KAAKwC,YAAYhB,EAJ3B,GAI6CoB,IAAI,SAACC,EAAKyC,GAAN,MAAe,CAAEV,EAAW,EAAPU,EAAUxC,EAAGD,MAGjG,IAAM0C,EAAc,IAAIxB,KAAKH,eAAeI,QAAQ,SAE9CwB,EAAYxF,KAAKoD,cAAcmC,GAI/BjD,EAAgC,KAFtCd,EAAYxB,KAAKkF,MAAM1D,WAEIuB,OAAgB,GAAKvB,EAAUiE,OAAO,SAACxC,EAAKJ,GAAN,OAAcI,EAAMJ,EAAIC,GAAG,IAAMtB,EAAUuB,OAAS,IAAI2C,QAAQ,GAE3HC,EAAS3F,KAAK0B,UAAUC,EAAUC,GAExC,OACI,yBAAK1B,UAAU,2BACX,yBAAKA,UAAU,kDAAkD0F,MAAO,CAAEC,gBAAiB,YAEvF,yBAAK3F,UAAU,gBAAgB0F,MAAO,CAAE,MAAS,UAC7C,kBAAC,IAAD,CACI1F,UAAU,MACV4F,MAAOC,IAAaC,SACpBC,cAAe,CAAErB,EAAG,CAAC,EAAG,IAAK9B,EAAG,CAAC,EAAG,KAGpCoD,mBACI,kBAAC,IAAD,CACIC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,wBAA0BA,EAAMxB,EAAhC,aAAsCwB,EAAMtD,EAA5C,aACRuD,iBAAkB,CAAC,SAAU,YAKrC,kBAAC,IAAD,CAAcC,KAAI,kBAAad,GAAaZ,EAAG,IAAK9B,EAAG,GAAIyD,WAAW,WAGtE,kBAAC,IAAD,CACIX,MAAOD,EAAO9D,MACd2E,MAAM,UACNC,iBAAe,IAEnB,kBAAC,IAAD,CACIb,MAAOD,EAAOtD,MACdqE,eAAa,EACbF,MAAM,UACNC,iBAAe,IAInB,kBAAC,IAAD,CACIlE,KAA2B,IAArBf,EAAUuB,OAAe,GAAKvB,EACpCmF,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,QAK5B,kBAAC,IAAD,CACIE,KAAK,QACLvE,KAAMS,EACN4C,MAAOD,EAAOrD,QACdqE,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,QAK5B,kBAAC,IAAD,CACIE,KAAK,SACLvE,KAA2B,IAArBf,EAAUuB,OAAe,GAAKvB,EACpCmF,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,UAOpC,yBAAK1G,UAAU,UAAU0F,MAAO,CAAE,MAAS,UACvC,yBAAK1F,UAAU,UAGX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAgBgB,MAAOlB,KAAKC,MAAMiB,MAAOD,gBAAiBjB,KAAKiB,mBAGnE,yBAAKf,UAAU,OACX,wCAAcoC,IAIlB,yBAAKpC,UAAU,YACX,kBAAC,EAAD,CAAYG,QAASL,KAAKK,QAASN,KAAMwF,a,GA5HhDjF,aA2RVyG,sBAAWtF,I","file":"static/js/5.2719a5e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DateSelect extends Component {\r\n  render() {\r\n    const { date } = this.props;\r\n\r\n    return (\r\n      <div >\r\n        <DatePicker className='' selected={date} onChange={date => this.props.setDate(date)} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default DateSelect;","import React, { Component } from 'react';\r\n\r\nclass DataEntryField extends Component {\r\n    render() {\r\n        const { guest } = this.props;\r\n\r\n        return (\r\n            // Form\r\n            <form onSubmit={this.submitData}>\r\n                <div className=''>\r\n\r\n                    {/* Input field */}\r\n                    <div>\r\n                        <input\r\n                            className={`f6 mb2 input-reset fl black-80  pa3 lh-solid w-100 w-75-m w-80-l br3 b--black ${guest === 'true' ? 'bg-moon-gray' : 'bg-white'}`}\r\n                            type='text'\r\n                            placeholder={`Number of catches ${guest === 'true' ? '(disabled as guest)' : ''}`}\r\n                            ref=\"input\"\r\n                            disabled={guest === 'true' ? true : null}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Submit button */}\r\n                    <div>\r\n                        <input\r\n                            className={`f6 button-reset pv3 tc bn bg-green hover-bg-green white w-50 w-25-m w-20-l br3 ${guest === 'true' ? null : 'pointer'}`}\r\n                            type='submit'\r\n                            value='Add'\r\n                            disabled={guest === 'true' ? true : null}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // When data is entered into the input field\r\n    submitData = (event) => {\r\n        event.preventDefault(); // Prevent page from refreshing when submitted\r\n\r\n        const num = parseInt(this.refs.input.value, 10); // Get value\r\n\r\n        // If value is actually a number update daily data and clear text field\r\n        // Otherwise just clear text field and nothing else\r\n        if (isNaN(num)) {\r\n            this.refs.input.value = '';\r\n        } else {\r\n            this.refs.input.value = '';\r\n            this.props.updateDailyData(num);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DataEntryField;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryLine, VictoryAxis, VictoryVoronoiContainer, VictoryScatter, VictoryLabel } from 'victory';\r\nimport DateSelect from '../Components/DateSelect';\r\nimport DataEntryField from './DataEntryField';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './Chart.css'\r\n\r\nlet dailyData = [];\r\n\r\nclass DailyChart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dailyData: dailyData,\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update storage and get data when app opened\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem('date')) {\r\n            this.setDate(new Date(sessionStorage.getItem('date')));\r\n        }\r\n\r\n        this.props.changeCurrentPath(this.props.location.pathname);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        const { xPadding, yPadding } = this.props; // Padding for charts\r\n\r\n        // Data for average line\r\n        let deletedNoiseArray = [];\r\n        const chunk = 5;\r\n\r\n        // Create average line data\r\n        if (dailyData.length > 1) {\r\n            deletedNoiseArray = this.removeNoise(dailyData, chunk).map((val, ind) => ({ x: (ind) * 5, y: val }));\r\n        }\r\n\r\n        const currentDate = new Date(sessionStorage.getItem('date')); // Current presented date\r\n\r\n        const titleDate = this.stringifyDate(currentDate); // Date for title\r\n\r\n        dailyData = this.state.dailyData; // Current data\r\n\r\n        const average = (dailyData.length === 1) ? 0 : (dailyData.reduce((acc, val) => acc + val.y, 0) / (dailyData.length - 1)).toFixed(2); // Average\r\n\r\n        const styles = this.getStyles(xPadding, yPadding); // Chart styles\r\n\r\n        return (\r\n            <div className='mt3 flex justify-center'>\r\n                <div className='cont flex justify-center mt2 pl3 pr3 ba br3 bw1' style={{ backgroundColor: '#ECD9BA' }}>\r\n\r\n                    <div className='chart mr3 bw1' style={{ 'width': '600px' }}>\r\n                        <VictoryChart\r\n                            className='mt6'\r\n                            theme={VictoryTheme.material}\r\n                            domainPadding={{ x: [0, 30], y: [0, 30] }} // Fix weird cutoff problem sort of\r\n\r\n                            // Component allows hovering over data for information\r\n                            containerComponent={\r\n                                <VictoryVoronoiContainer\r\n                                    labels={({ datum }) => `Attempt ${datum.x}: ${datum.y} catches`}\r\n                                    voronoiBlacklist={['points', 'noise']}\r\n                                />}\r\n                        >\r\n\r\n                            {/* Title */}\r\n                            <VictoryLabel text={`Catches ${titleDate}`} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                            {/* Axes and labels */}\r\n                            <VictoryAxis\r\n                                style={styles.xAxis}\r\n                                label='Attempt'\r\n                                fixLabelOverlap\r\n                            />\r\n                            <VictoryAxis\r\n                                style={styles.yAxis}\r\n                                dependentAxis\r\n                                label='Catches'\r\n                                fixLabelOverlap\r\n                            />\r\n\r\n                            {/* Line graph */}\r\n                            <VictoryLine\r\n                                data={dailyData.length === 1 ? [] : dailyData}\r\n                                animate={{\r\n                                    duration: 1000,\r\n                                    onLoad: { duration: 2000 }\r\n                                }}\r\n                            />\r\n\r\n                            {/* Data with noise removed */}\r\n                            <VictoryLine\r\n                                name='noise'\r\n                                data={deletedNoiseArray}\r\n                                style={styles.average}\r\n                                animate={{\r\n                                    duration: 1000,\r\n                                    onLoad: { duration: 2000 }\r\n                                }}\r\n                            />\r\n\r\n                            {/* Scatter plot */}\r\n                            <VictoryScatter\r\n                                name='points'\r\n                                data={dailyData.length === 1 ? [] : dailyData}\r\n                                animate={{\r\n                                    duration: 1000,\r\n                                    onLoad: { duration: 2000 }\r\n                                }}\r\n                            />\r\n                        </VictoryChart>\r\n                    </div>\r\n\r\n                    {/* Input field and date selector */}\r\n                    <div className='ml3 mt5' style={{ 'width': '300px' }}>\r\n                        <div className='center'>\r\n\r\n                            {/* Enter number field */}\r\n                            <div className='overflow-auto'>\r\n                                <DataEntryField guest={this.props.guest} updateDailyData={this.updateDailyData} />\r\n                            </div>\r\n\r\n                            <div className='mt4'>\r\n                                <h3>Average: {average}</h3>\r\n                            </div>\r\n\r\n                            {/* Date picker */}\r\n                            <div className='date mt4'>\r\n                                <DateSelect setDate={this.setDate} date={currentDate} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    getStyles = (xPadding, yPadding) => {\r\n        return {\r\n            xAxis: {\r\n                axisLabel: { padding: xPadding, fill: 'black' },\r\n                axis: { padding: 100, stroke: 'black' },\r\n                tickLabels: { fill: 'black' },\r\n                ticks: { stroke: 'black' }\r\n            },\r\n            yAxis: {\r\n                axisLabel: { padding: yPadding, fill: 'black' },\r\n                axis: { stroke: 'black' },\r\n                tickLabels: { fill: 'black' },\r\n                ticks: { stroke: 'black' }\r\n            },\r\n            average: {\r\n                data: { stroke: \"#c43a31\" }\r\n            }\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Removes noise from data by taking average every chunk-sized chunks\r\n    removeNoise = (data, chunk) => {\r\n        const catchPoints = data.slice(1).map((val) => val.y); // Isolate catch data\r\n        const length = catchPoints.length;\r\n        let deletedNoiseArray = [0]; // Start with zero\r\n        let acc = 0;\r\n\r\n        // Remove noise\r\n        for (var i = 0; i < length; i++) {\r\n\r\n            // If chunk size is reached, push in average for that chunk\r\n            // and reset the acc to 0\r\n            if (!(i % chunk) && (i !== 0)) {\r\n                deletedNoiseArray.push(acc / chunk);\r\n                acc = 0;\r\n            }\r\n\r\n            // Accumulate sum\r\n            acc += catchPoints[i];\r\n\r\n            // If length is divisible by chunk, just push average for chunk size\r\n            if (!(length % chunk) && i === length - 1) {\r\n                deletedNoiseArray.push(acc / (chunk));\r\n            }\r\n\r\n            // Else if we are at the last element, just push in average for however much was left\r\n            else if (i === length - 1) {\r\n                deletedNoiseArray.push(acc / (length % chunk));\r\n            }\r\n        }\r\n\r\n        // Return final array\r\n        return deletedNoiseArray;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Turn date into a string\r\n    stringifyDate = (date) => {\r\n        // Reformat the date to make it easier to pass into DB/title\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n        let day = date.getDate().toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        if (day.length === 1) {\r\n            day = '0' + day;\r\n        }\r\n\r\n        return `${year}-${month}-${day}`;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Change date to date selected on calendar\r\n    setDate = (date) => {\r\n        sessionStorage.setItem('date', date);\r\n\r\n        this.getDailyData(new Date(sessionStorage.getItem('date')));\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Get graph data for a certain day\r\n    getDailyData = (date) => {\r\n        // Reformat the date to make it easier to pass into DB/title\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n        let day = date.getDate().toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        if (day.length === 1) {\r\n            day = '0' + day;\r\n        }\r\n\r\n        const fullDate = `${year}-${month}-${day}`;\r\n\r\n        // Call to backend to get data\r\n        fetch('https://obscure-river-59718.herokuapp.com/dailygraph', {\r\n            method: 'post', // Can't pass in body if it's a GET\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                newDate: fullDate // Pass in the new date\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Change the dailyData to reflect the new date\r\n                // TODO: Don't set up initial dailyData like this. Idea: update DB to include a 0 catch every day\r\n                dailyData = [{ x: 0, y: 0 }].concat(data.map((num, index) => ({ x: index + 1, y: parseInt(num.catches) })));\r\n                this.setState({ dailyData });\r\n            });\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update DB/graph when data is input\r\n    updateDailyData = (catches) => {\r\n        fetch('https://obscure-river-59718.herokuapp.com/dailyupdate', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                catches: catches\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then((res) => {\r\n                this.setState({ date: new Date() }, () => this.getDailyData(this.state.date));\r\n                return res;\r\n            })\r\n            .then((res) => {\r\n                // Update the state\r\n                // I COULD call getDailyData but that would just take too much time tbh\r\n                // TODO: Is there a better way to do this? Combine this function and getDailyData somehow?\r\n                dailyData.push({ x: dailyData.length, y: res.catches });\r\n                this.setState({ dailyData });\r\n            });\r\n    }\r\n}\r\n\r\nexport default withRouter(DailyChart);"],"sourceRoot":""}