{"version":3,"sources":["Components/DataEntryField.js","Components/DailyChart.js","Components/DailyAverageChart.js","Containers/App.js","serviceWorker.js","index.js"],"names":["DataEntryField","submitData","event","preventDefault","num","parseInt","refs","input","value","isNaN","props","updateDailyData","onSubmit","this","className","type","placeholder","ref","Component","DailyChart","dailyData","xPadding","yPadding","xAxisTicks","map","dat","x","push","length","theme","VictoryTheme","material","containerComponent","labels","datum","y","voronoiBlacklist","style","axisLabel","padding","axis","label","tickValues","crossAxis","dependentAxis","data","animate","duration","onLoad","name","DailyAverageChart","dailyAverageData","fixLabelOverlap","App","setState","updateAverageData","newAverage","reduce","a","b","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.490dca45.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DataEntryField extends Component {\r\n    render() {\r\n        return (\r\n            // Form\r\n            <form onSubmit={this.submitData}>\r\n                <div className='cf'>\r\n                    \r\n                    {/* Input field */}\r\n                    <div>\r\n                        <input\r\n                            className='f6 f5-l input-reset fl black-80 bg-white pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns b--black'\r\n                            type='text'\r\n                            placeholder='Number of catches'\r\n                            ref=\"input\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Submit button */}\r\n                    <div>\r\n                        <input\r\n                            className='f6 f5-l button-reset fl pv3 tc bn bg-green hover-bg-green white pointer w-100 w-25-m w-20-l br2-ns br--right-ns'\r\n                            type='submit'\r\n                            value='Add'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    submitData = (event) => {\r\n        event.preventDefault(); // Prevent page from refreshing when submitted\r\n\r\n        const num = parseInt(this.refs.input.value, 10); // Get value\r\n        \r\n        // If value is actually a number update daily data and clear text field\r\n        // Otherwise just clear text field and nothing else\r\n        if (isNaN(num)) {\r\n            this.refs.input.value = '';\r\n        } else {\r\n            this.refs.input.value = '';\r\n            this.props.updateDailyData(num);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DataEntryField;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryLine, VictoryAxis, VictoryVoronoiContainer, VictoryScatter } from 'victory';\r\n\r\nimport DataEntryField from './DataEntryField';\r\n\r\nclass DailyChart extends Component {\r\n\r\n\r\n    render() {\r\n        const { dailyData, updateDailyData, xPadding, yPadding } = this.props;\r\n\r\n        // Custom tick marks\r\n        const xAxisTicks = dailyData.map(dat => dat.x);\r\n        xAxisTicks.push(dailyData.length);\r\n\r\n        return (\r\n            <div className='mw6 center'>\r\n\r\n                {/* Chart */}\r\n                <VictoryChart\r\n                    theme={VictoryTheme.material}\r\n\r\n                    // Component allows hovering over data for information\r\n                    containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                            labels={({ datum }) => `Attempt ${datum.x}: ${datum.y} catches`}\r\n                            voronoiBlacklist={['points']}\r\n                        />}\r\n                >\r\n\r\n                    {/* Axes and labels */}\r\n                    <VictoryAxis style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }} label='Attempt Number' tickValues={xAxisTicks} />\r\n                    <VictoryAxis crossAxis={false} style={{ axisLabel: { padding: yPadding } }} dependentAxis label='Catches' />\r\n\r\n                    {/* Line graph */}\r\n                    <VictoryLine\r\n                        data={dailyData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n\r\n                    {/* Scatter plot */}\r\n                    <VictoryScatter\r\n                        name='points'\r\n                        data={dailyData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n                </VictoryChart>\r\n\r\n                <br></br>\r\n\r\n                {/* Input field to input num catches */}\r\n                <DataEntryField updateDailyData={updateDailyData} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default DailyChart;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryLine, VictoryAxis, VictoryScatter, VictoryVoronoiContainer } from 'victory';\r\n\r\nclass DailyAverageChart extends Component {\r\n    render() {\r\n        const { dailyAverageData, xPadding, yPadding } = this.props;\r\n\r\n        return (\r\n            <div className='mw6 center'>\r\n                {/* Chart */}\r\n                <VictoryChart\r\n                    theme={VictoryTheme.material}\r\n\r\n                    // Component allows hovering over data for information\r\n                    containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                            labels={({ datum }) => `Day ${datum.x} average: ${datum.y} catches`}\r\n                            voronoiBlacklist={['points']}\r\n                        />\r\n                    }\r\n                >\r\n\r\n                    {/* Axes and labels */}\r\n                    <VictoryAxis style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }} label='Day' fixLabelOverlap />\r\n                    <VictoryAxis style={{ axisLabel: { padding: yPadding } }} dependentAxis label='Average Number Catches' fixLabelOverlap />\r\n\r\n                    {/* Line graph */}\r\n                    <VictoryLine\r\n                        data={dailyAverageData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n\r\n                    {/* Scatter plot */}\r\n                    <VictoryScatter\r\n                        name='points'\r\n                        data={dailyAverageData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n                </VictoryChart>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default DailyAverageChart;","import React, { Component } from 'react';\nimport DailyChart from '../Components/DailyChart';\nimport DailyAverageChart from '../Components/DailyAverageChart';\n\nconst dailyData = [\n  { x: 0, y: 0 },\n  { x: 1, y: 1 },\n  { x: 2, y: 3 },\n  { x: 3, y: 5 },\n];\n\nconst dailyAverageData = [\n  { x: 0, y: 0 }\n];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dailyData: dailyData,\n      dailyAverageData: dailyAverageData\n    }\n  }\n\n  render() {\n    // Padding for the graphs cause otherwise the labels overlap\n    // the numbers and it looks like hot garbage\n    const xPadding = 30;\n    const yPadding = 40;\n\n    return (\n      <div>\n        {/* Daily catches graph */}\n        <DailyChart dailyData={dailyData} updateDailyData={this.updateDailyData} xPadding={xPadding} yPadding={yPadding} />\n\n        {/* Daily average catches graph */}\n        <DailyAverageChart dailyAverageData={dailyAverageData} xPadding={xPadding} yPadding={yPadding}/>\n      </div>\n\n    );\n  }\n\n  updateDailyData = (num) => {\n    dailyData.push({ x: dailyData.length, y: num }); // Push new data onto data array\n    this.setState({ dailyData }); // Update state\n    this.updateAverageData(dailyData); // Update average data\n  }\n\n  updateAverageData = (data) => {\n    const catchValues = dailyData.map(dat => dat.y); // Get array of catches in a day\n    const newAverage = catchValues.reduce((a, b) => a + b, 0) / (dailyData.length - 1); // Get average\n    dailyAverageData.push({ x: dailyAverageData.length, y: newAverage }); // Push average onto data array\n    this.setState({ dailyAverageData }); // Update state\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}