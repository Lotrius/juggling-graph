{"version":3,"sources":["Components/DateSelectAvg.js","Components/DailyAverageChart.js"],"names":["DateSelectAvg","averageDate","selected","onChange","date","props","getAverageData","dateFormat","showMonthYearPicker","dailyAverageData","DailyAverageChart","year","getFullYear","toString","month","getMonth","length","selectedMonth","fetch","method","headers","body","JSON","stringify","then","response","json","avgdata","map","dat","x","to_char","substring","y","parseFloat","avg","setState","state","Date","this","xPadding","yPadding","dailyAverageDataMonth","className","theme","VictoryTheme","material","domainPadding","containerComponent","labels","datum","toFixed","voronoiBlacklist","text","textAnchor","style","axisLabel","padding","axis","label","fixLabelOverlap","tickValues","data","dependentAxis","animate","duration","onLoad","changeCurrentPath","location","pathname","Component","withRouter"],"mappings":"wRAiBeA,EAbO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,OACI,6BACI,kBAAC,IAAD,CACIC,SAAUD,EACVE,SAAU,SAAAC,GAAI,OAAI,EAAKC,MAAMC,eAAeF,IAC5CG,WAAW,UACXC,qBAAmB,M,QCN/BC,EAAmB,GAEjBC,E,YACF,aAAe,IAAD,8BACV,+CAyEJJ,eAAiB,SAACF,GAEd,IAAMO,EAAOP,EAAKQ,cAAcC,WAC5BC,GAASV,EAAKW,WAAa,GAAGF,WAEb,IAAjBC,EAAME,SACNF,EAAQ,IAAMA,GAGlB,IAAMG,EAAgBN,EAAO,IAAMG,EAGnCI,MAAM,yDAA0D,CAC5DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBN,cAAeA,MAGlBO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GACHlB,EAAmBkB,EAAQC,IAAI,SAACC,GAAD,MAAU,CAAEC,EAAGD,EAAIE,QAAQC,UAAU,EAAG,IAAKC,EAAGC,WAAWL,EAAIM,QAC9F,EAAKC,SAAS,CAAE3B,mBAAkBR,YAAaG,OA9FvD,EAAKiC,MAAQ,CACT5B,iBAAkBA,EAClBR,YAAa,IAAIqC,MAJX,E,sEAUJ,IAAD,EAC0BC,KAAKlC,MAA5BmC,EADH,EACGA,SAAUC,EADb,EACaA,SAIdC,EAFW,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE1FH,KAAKF,MAAMpC,YAAYc,YAE3D,OACI,yBAAK4B,UAAU,cAEX,kBAAC,IAAD,CACIC,MAAOC,IAAaC,SACpBC,cAAe,CAAEjB,EAAG,CAAC,GAAI,KAGzBkB,mBACI,kBAAC,IAAD,CACIC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBA,EAAMpB,EAAxB,sBAAuCoB,EAAMjB,EAAEkB,QAAQ,GAAvD,aACRC,iBAAkB,CAAC,aAM3B,kBAAC,IAAD,CAAcC,KAAI,0BAAqBX,GAAyBZ,EAAG,IAAKG,EAAG,GAAIqB,WAAW,WAG1F,kBAAC,IAAD,CACIC,MAAO,CAAEC,UAAW,CAAEC,QAASjB,GAAYkB,KAAM,CAAED,QAAS,MAC5DE,MAAM,MACNC,iBAAe,EACfC,WACgC,IAA5BpD,EAAiBO,OAAe,CAAC,EAAG,GAAKP,EAAiBmB,IAAI,SAACkC,GAAD,OAAUA,EAAKhC,MAGrF,kBAAC,IAAD,CACIyB,MAAO,CAAEC,UAAW,CAAEC,QAAShB,IAC/BsB,eAAa,EACbJ,MAAM,kBACNC,iBAAe,EACfC,WACgC,IAA5BpD,EAAiBO,OAAe,CAAC,EAAG,GAAK,KAKjD,kBAAC,IAAD,CACI8C,KAAMrD,EACNuD,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,OAMhC,kBAAC,EAAD,CAAe3D,eAAgBiC,KAAKjC,eAAgBL,YAAasC,KAAKF,MAAMpC,iB,0CAsCpFsC,KAAKjC,eAAeiC,KAAKF,MAAMpC,aAC/BsC,KAAKlC,MAAM8D,kBAAkB5B,KAAKlC,MAAM+D,SAASC,c,GA1GzBC,aA8GjBC,sBAAW7D","file":"static/js/5.7860330f.chunk.js","sourcesContent":["import React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst DateSelectAvg = ({ averageDate }) => {\r\n    return (\r\n        <div >\r\n            <DatePicker\r\n                selected={averageDate}\r\n                onChange={date => this.props.getAverageData(date)}\r\n                dateFormat=\"MM/yyyy\"\r\n                showMonthYearPicker\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateSelectAvg;","import React, { Component } from 'react';\r\nimport { VictoryTheme, VictoryChart, VictoryBar, VictoryAxis, VictoryVoronoiContainer, VictoryLabel } from 'victory';\r\nimport DateSelectAvg from './DateSelectAvg';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nlet dailyAverageData = [];\r\n\r\nclass DailyAverageChart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            dailyAverageData: dailyAverageData,\r\n            averageDate: new Date()\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n        const { xPadding, yPadding } = this.props;\r\n\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] // Array of month names\r\n\r\n        let dailyAverageDataMonth = months[(this.state.averageDate.getMonth())]; // Declare month name var\r\n\r\n        return (\r\n            <div className='mw6 center'>\r\n                {/* Chart */}\r\n                <VictoryChart\r\n                    theme={VictoryTheme.material}\r\n                    domainPadding={{ x: [50, 90] }} // Fix overlapping/cutoff problem\r\n\r\n                    // Component allows hovering over data for information\r\n                    containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                            labels={({ datum }) => `${datum.x} average: ${+datum.y.toFixed(2)} catches`}\r\n                            voronoiBlacklist={['points']}\r\n                        />\r\n                    }\r\n                >\r\n\r\n                    {/* Title */}\r\n                    <VictoryLabel text={`Average catches ${dailyAverageDataMonth}`} x={180} y={30} textAnchor=\"middle\" />\r\n\r\n                    {/* Axes and labels */}\r\n                    <VictoryAxis\r\n                        style={{ axisLabel: { padding: xPadding }, axis: { padding: 100 } }}\r\n                        label='Day'\r\n                        fixLabelOverlap\r\n                        tickValues={\r\n                            dailyAverageData.length === 0 ? [0, 1] : dailyAverageData.map((data) => data.x)\r\n                        }\r\n                    />\r\n                    <VictoryAxis\r\n                        style={{ axisLabel: { padding: yPadding } }}\r\n                        dependentAxis\r\n                        label='Average Catches'\r\n                        fixLabelOverlap\r\n                        tickValues={\r\n                            dailyAverageData.length === 0 ? [0, 1] : []\r\n                        }\r\n                    />\r\n\r\n                    {/* Bar graph */}\r\n                    <VictoryBar\r\n                        data={dailyAverageData}\r\n                        animate={{\r\n                            duration: 1000,\r\n                            onLoad: { duration: 0 }\r\n                        }}\r\n                    />\r\n                </VictoryChart>\r\n\r\n                {/* Date picker */}\r\n                <DateSelectAvg getAverageData={this.getAverageData} averageDate={this.state.averageDate} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Get average data graph\r\n    getAverageData = (date) => {\r\n        // Stringify date\r\n        const year = date.getFullYear().toString();\r\n        let month = (date.getMonth() + 1).toString();\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        const selectedMonth = year + '-' + month;\r\n\r\n        // Call to backend\r\n        fetch('https://obscure-river-59718.herokuapp.com/averagegraph', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                selectedMonth: selectedMonth\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then((avgdata) => {\r\n                dailyAverageData = avgdata.map((dat) => ({ x: dat.to_char.substring(8, 10), y: parseFloat(dat.avg) }));\r\n                this.setState({ dailyAverageData, averageDate: date });\r\n            })\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update state and get data when app opened\r\n    componentDidMount() {\r\n        this.getAverageData(this.state.averageDate);\r\n        this.props.changeCurrentPath(this.props.location.pathname);\r\n    }\r\n}\r\n\r\nexport default withRouter(DailyAverageChart);"],"sourceRoot":""}