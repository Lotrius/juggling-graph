{"version":3,"sources":["Containers/App.js","serviceWorker.js","index.js"],"names":["SignIn","loadable","DailyChart","DailyAverageChart","Nav","App","changeLoginStatus","guest","Cookie","get","localStorage","getItem","setItem","sessionStorage","removeItem","set","forceUpdate","changeCurrentPath","path","Date","basename","to","this","exact","render","xPadding","yPadding","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAKMA,EAASC,YAAS,kBAAM,gCACxBC,EAAaD,YAAS,kBAAM,6DAC5BE,EAAoBF,YAAS,kBAAM,6DACnCG,EAAMH,YAAS,kBAAM,gCAwGZI,E,2MA5CbC,kBAAoB,SAACC,GAEY,UAA3BC,IAAOC,IAAI,aAA4BD,IAAOC,IAAI,YAYlB,SAA3BD,IAAOC,IAAI,cAGoB,SAAlCC,aAAaC,QAAQ,UACvBD,aAAaE,QAAQ,SAAS,GAIhCC,eAAeC,WAAW,WAC1BD,eAAeC,WAAW,QAI1BJ,aAAaE,QAAQ,OAAQ,KAG7BJ,IAAOO,IAAI,YAAY,KAzBnBR,GACFG,aAAaE,QAAQ,SAAS,GAIhCJ,IAAOO,IAAI,YAAY,IAuBzB,EAAKC,e,EAMPC,kBAAoB,SAACC,GACnBR,aAAaE,QAAQ,OAAQM,I,mFA/F7BL,eAAeD,QAAQ,OAAQ,IAAIO,MACnCN,eAAeD,QAAQ,UAAW,IAAIO,Q,+BAG9B,IAAD,OAMHD,EAAOR,aAAaC,QAAQ,QAE5BJ,EAAQG,aAAaC,QAAQ,SAGjC,MAA+B,UAA3BH,IAAOC,IAAI,aAA4BD,IAAOC,IAAI,YAclB,SAA3BD,IAAOC,IAAI,YAEhB,kBAAC,IAAD,CAAQW,SAAS,mBAGf,kBAAC,IAAD,CAAUC,GAAIH,GAAc,MAE5B,kBAACd,EAAD,CAAKE,kBAAmBgB,KAAKhB,oBAE7B,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,OAAQ,kBAAM,kBAACtB,EAAD,CAAYuB,SAlC9B,GAkCkDC,SAjClD,GAiCsEnB,MAAOA,EAAOU,kBAAmB,EAAKA,qBAAuBC,KAAK,MAGjJ,kBAAC,IAAD,CAAOK,OAAK,EAACC,OAAQ,kBAAM,kBAACrB,EAAD,CAAmBsB,SArCrC,GAqCyDC,SApCzD,GAoC6EnB,MAAOA,EAAOU,kBAAmB,EAAKA,qBAAuBC,KAAK,oBAf3J,EAZD,kBAAC,IAAD,CAAQE,SAAS,mBAGf,kBAAC,IAAD,CAAUC,GAAG,YAEb,kBAAC,IAAD,CAAOE,OAAK,EAACC,OAAQ,kBAAM,kBAACxB,EAAD,CAAQM,kBAAmB,EAAKA,qBAAuBY,KAAK,iB,GAzB/ES,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e5d599b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Cookie from 'js-cookie';\nimport loadable from '@loadable/component';\n\nconst SignIn = loadable(() => import('../Components/SignIn'));\nconst DailyChart = loadable(() => import('../Components/DailyChart'));\nconst DailyAverageChart = loadable(() => import('../Components/DailyAverageChart'));\nconst Nav = loadable(() => import('../Components/Nav'));\n\nclass App extends Component {\n  componentDidMount() {\n    // Set session dates\n    sessionStorage.setItem('date', new Date());\n    sessionStorage.setItem('avgdate', new Date());\n  }\n\n  render() {\n    // Padding for the graphs cause otherwise the labels overlap\n    // the numbers and it looks like hot garbage\n    const xPadding = 30;\n    const yPadding = 40;\n\n    let path = localStorage.getItem('path'); // Current path\n\n    let guest = localStorage.getItem('guest'); // Signed in as guest or not\n\n    // If there's a cookie or if signed out, go to login page\n    if (Cookie.get(\"signedin\") === \"false\" || !Cookie.get(\"signedin\")) {\n      return (\n        <Router basename='/juggling-graph'>\n\n          {/* Redirect to sign in page */}\n          <Redirect to='/signin' />\n\n          <Route exact render={() => <SignIn changeLoginStatus={this.changeLoginStatus} />} path='/signin' />\n\n        </Router>\n      );\n    }\n\n    // Else go to main page\n    else if (Cookie.get(\"signedin\") === \"true\") {\n      return (\n        <Router basename='/juggling-graph'>\n\n          {/* Redirect to main page */}\n          <Redirect to={path ? path : '/'} />\n\n          <Nav changeLoginStatus={this.changeLoginStatus} />\n\n          <Switch>\n\n            {/* Daily catches graph */}\n            <Route exact render={() => <DailyChart xPadding={xPadding} yPadding={yPadding} guest={guest} changeCurrentPath={this.changeCurrentPath} />} path='/' />\n\n            {/* Daily average catches graph */}\n            <Route exact render={() => <DailyAverageChart xPadding={xPadding} yPadding={yPadding} guest={guest} changeCurrentPath={this.changeCurrentPath} />} path='/average' />\n\n          </Switch>\n        </Router>\n      )\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // Flip login status\n  changeLoginStatus = (guest) => {\n    //If not signed in, or was never signed in to begin with and are now logging in,\n    if (Cookie.get(\"signedin\") === \"false\" || !Cookie.get(\"signedin\")) {\n\n      // If guest, set guest as true\n      if (guest) {\n        localStorage.setItem('guest', true);\n      }\n\n      // Signed in cookie true\n      Cookie.set(\"signedin\", true);\n    }\n\n    // If already signed in and logging out,\n    else if (Cookie.get(\"signedin\") === \"true\") {\n\n      // If a guest, set guest status to false\n      if (localStorage.getItem('guest') === \"true\") {\n        localStorage.setItem('guest', false);\n      }\n\n      // Remove session data\n      sessionStorage.removeItem('avgdate');\n      sessionStorage.removeItem('date');\n\n      // Change path to '/' so when signed in again,\n      // will start at daily catches chart\n      localStorage.setItem('path', '/');\n\n      // Set signed in to false\n      Cookie.set(\"signedin\", false);\n    }\n\n    this.forceUpdate(); // Force the app to rerender\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // Update current path\n  changeCurrentPath = (path) => {\n    localStorage.setItem('path', path);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}